<html><!-- #BeginTemplate "/Templates/Corso Base.dwt" -->
<head>
<script language="JavaScript" src="../funzioni.js"></script>
<script language="JavaScript" src="../scroller.js"></script>
<!-- #BeginEditable "doctitle" --> 
<title>Capitolo 5 del Corso Base</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../stili.css" rel="stylesheet" type="text/css" title="stili">
<link href="../codicevb.css" rel="stylesheet" type="text/css" title="codicevb">
<link href="../colori.css" rel="stylesheet" type="text/css" title="colori">
<meta name="description" content="Visual Basic Simple &egrave; l'unico sito in Italia che tratta la programmazione in Visual Basic in un'ottica mai vista prima d'ora. Tutti gli articoli sono spiegati passo dopo passo ed in una maniera davvero semplice per consentire a tutti di comprendere gli argomenti trattati.">
<meta name="keywords" content="VB, Visual, Basic, Simple, programmazione, codici, esempi, manuali, studio, sviluppo, ActiveX, OCX, articoli, notizie, apprendere, QBasic, API, COM, database">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td width="400" align="left" bgcolor="#FFFFFF"><img src="../images/vbslogo.jpg" width="400" height="80" border="0" alt="Visual Basic Simple"></td>
    <td width="100%" align="right" bgcolor="#FFFFFF"> 
      <div class="intestazioni"><a href="../home.htm">Home Page</a> <a href="../home.htm"><img src="../images/icons/dothome.gif" align="absmiddle" border="0" alt="Home Page" width="25" height="25"></a><br>
        <a href="../history.htm">Novit&agrave;</a> <a href="../history.htm"><img src="../images/icons/dotinfo.gif" align="absmiddle" border="0" alt="Informazioni su VB Simple" width="25" height="25"></a><br>
        <a href="../help.htm">Aiuto</a> <a href="../help.htm"><img src="../images/icons/dothelp.gif" align="absmiddle" border="0" alt="Hai bisogno d'aiuto?" width="25" height="25"></a></div>
    </td>
    <td width="160" align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 160x90, creato 02/02/09 */
google_ad_slot = "8970907891";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></td>
  </tr>
</table>

<div align="center"> 
  <div class="titolo">Corso base - Lezione <!-- #BeginEditable "LEZIONE" -->5<!-- #EndEditable --></div>
  <script language="Javascript">NomePagina();</script>
  <table width="80%" border="1" cellspacing="1" cellpadding="3" bordercolorlight="#000000" bordercolordark="#000000" class="dontprint">
    <tr class="size0"> 
      <td align="center" width="25%"><a href="../ftv21/base.htm" target="treeframe"><img src="../images/icons/search%20window.gif" width="16" height="16" border="0" alt="Sincronizza Indice"><br>
        Sincronizza Indice</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
        Scarica il progetto</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
        Testo dell'articolo</a></td>
      <td align="center" width="25%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
        Stampa l'articolo</a></td>
    </tr>
  </table>
</div>
<!-- #BeginEditable "ARGOMENTI" --> 
<ul>
  <li><a href="bas_05.htm#STEP1">Richiamo di un progetto attraverso la voce Recente</a>.</li>
  <li><a href="bas_05.htm#STEP2">Le variabili</a>.</li>
  <li><a href="bas_05.htm#STEP3">I tipi di dati elementari</a>.</li>
  <li><a href="bas_05.htm#STEP4">Vita di una variabile</a>.</li>
</ul>
<!-- #EndEditable -->
<hr>

<table width="100%" border="0">
  <tr> 
    <td width="80%"><script language="JavaScript">ShowArticlesScroller();</script><!-- #BeginEditable "CORPO" -->
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo grafica */
google_ad_slot = "0981518759";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p><img src="../images/lezioni/bas05_01.jpg" width="337" height="322" align="right" alt="Figura 1"><a name="STEP1"></a>Da 
        questa lezione in poi lavoremo sempre sul nostro progetto iniziato nella 
        lezione 1.</p>
      <p>Per cui, anche se non viene espressamente detto, ogni operazione da eseguire 
        su Visual Basic andr&agrave; fatta su questo progetto, richiamato nel 
        modo gi&agrave; visto nella <a href="bas_02.htm">lezione 2</a>, oppure 
        attraverso la voce <b>Recente</b> presente sulla finestra di avvio di 
        Visual Basic.</p>
      <p>Basta cliccare sulla voce Recente, che apparir&agrave; una finestra del 
        tutto simile a quella mostrata qui a fianco. Selezionare il progetto da 
        aprire, nel nostro caso il Progetto1 e premere il pulsante Apri.</p>
      <hr>
      <p><a name="STEP2"></a>Abbandoniamo per un attimo la finestra di progettazione 
        dei form e dedichiamoci alla vera programmazione Visual Basic, concentrandoci 
        sulla finestra del codice del form.</p>
      <p>Ogni programma per funzionare correttamente deve appoggiarsi sulle variabili, 
        delle aree di memoria dedicate alla memorizzazione di dati temporanei.</p>
      <p>Perch&eacute;?<br>
        Perch&eacute; il programmatore in <a href="../glossary/f.htm#FASEDIPROGETTAZIONE">fase 
        di progettazione</a> non conosce completamente le decisioni che prender&agrave; 
        l'utente nell'utilizzo del programma. Supponiamo di avere una casella 
        dentro la quale &egrave; possibile inserire numeri. Il programmatore, 
        a priori, non sa il valore preciso che l'utente immetter&agrave; in essa. 
        Egli sa solo che immetter&agrave; un valore.<br>
        Le variabili servono per immagazzinare i dati immessi dall'utente e poi 
        svolgere i calcoli con il valore contenuto nella variabile, il tutto in 
        <a href="../glossary/f.htm#FASEDIESECUZIONE">fase di esecuzione</a>.</p>
      <p><a name="STEP3"></a>In Visual Basic, come in ogni altro linguaggio di 
        programmazione, &egrave; necessario definire comunque, prima del loro 
        utilizzo, il tipo di dati che la variabile utilizzer&agrave;, per permettere 
        al computer di <a href="../glossary/a.htm#ALLOCARE">allocare</a> la memoria 
        necessaria per contenere i dati che vi verranno immessi.</p>
      <p>Se decidiamo che una variabile dovr&agrave; contenere numeri interi, 
        essa non potr&agrave; contenere numeri decimali o parole. Quest'operazione 
        durante la quale si decide il tipo di dati da trattare con la variabile 
        &egrave; detta <b>dichiarazione</b>.</p>
      <p>In Visual Basic esistono varie tipologie di dati; queste sono:</p>
      <ul>
        <li><b>Integer</b><br>
          Capace di memorizzare soltanto numeri interi, positivi o negativi.</li>
        <li><b>Byte</b><br>
          Che pu&ograve; contenere un numero compreso tra 0 e 255 ovvero la dimensione 
          di un <a href="../glossary/b.htm#BYTE">byte</a>, quindi 8 bit (2 ^ 8 
          = 255).</li>
        <li><b>Long</b><br>
          Rappresenta un numero intero lungo, con una capacit&agrave; di molto 
          maggiore rispetto all'Integer.</li>
        <li><b>Single<br>
          </b>Rappresenta un numero decimale con <a href="../glossary/v.htm#VIRGOLAMOBILE">virgola 
          mobile</a> a precisione singola.</li>
        <li><b>Double</b><br>
          Analogo al single, ma con precisione doppia e quindi ampiezza molto 
          maggiore.</li>
        <li><b>Currency</b><br>
          Pu&ograve; contenere numeri molto ampi con un massimo di 4 cifre decimali.</li>
        <li><b>Date</b><br>
          Tipo usato per rappresentare date complete di giorno, mese, anno a 4 
          cifre ed orari comprensivi di ora, minuti e secondi.</li>
        <li><b>Boolean</b><br>
          Rappresenta una condizione. Il suo valore pu&ograve; essere soltanto 
          <b>Vero</b> o <b>Falso</b>.</li>
        <li><b>String</b><br>
          Contenitore per <a href="../glossary/s.htm#STRINGA">stringhe</a>, testi. 
          Il suo valore non &egrave; un numero, ma una sequenza di simboli. Per 
          essere utilizzato in formule matematiche deve essere convertito.<br>
          Il valore di una variabile di tipo String deve sempre racchiuso tra 
          virgolette.</li>
        <li><b>Object</b><br>
          <a href="../glossary/p.htm#PUNTATORE">Puntatore</a> ad un oggetto in 
          memoria. Il suo valore non &egrave; una copia di un altro. Qualunque 
          modifica fatta all'oggetto puntato da una variabile di questo tipo si 
          riflette sull'oggetto puntato da essa.</li>
        <li><b>Variant</b><br>
          Tipologia di dati variante. Pu&ograve; cio&egrave; contenere un valore 
          qualunque, poich&eacute; si adata a tutti i tipi precedentemente visti.</li>
        <li><b>Decimal<br>
          </b>Particolare tipologia di dati, non assegnabile direttamente ad una 
          variabile, ma &egrave; un sottotipo della tipologia Variant. Pu&ograve; 
          contenere dati numerici molto ampi.</li>
      </ul>
      <p>Tutti i tipi di dati fondamentali sono approfonditi nella sezione <a href="../info/info_04.htm">Informazioni 
        aggiuntive</a>.</p>
    <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* Contenuti 468x60 */
google_ad_slot = "0785185013";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Allora perch&eacute; non utilizzare le tipologie di dati pi&ugrave; ampie, 
        in modo da evitare un <a href="../glossary/o.htm#OVERFLOW">overflow</a>, 
        un superamento del limite massimo memorizzabile da una variabile?<br>
        Perch&eacute; tutte le tipologie di dati hanno un'occupazione diversa. 
        Il tipo <b>Byte</b> occuper&agrave; sempre 8 bit, ma il tipo <b>Long</b>, 
        occuper&agrave; sempre 32 bit, cio&egrave; 4 volte lo spazio occupato 
        dal tipo precedente. Questo pu&ograve; provocare un notevole rallentamento 
        in caso di decine di dichiarazioni di quel genere.</p>
      <p>Se siamo sicuri che un utente immetter&agrave; un numero compreso tra 
        0 e 999 senza virgola decimale, il tipo byte non sar&agrave; sufficiente. 
        Se il numero fosse minore di 256 potrebbe andar bene, ma se l'utente immettesse 
        il numero 789 e noi avessimo definito la variabile di tipo byte, si verificherebbe 
        un errore ed il programma si chiuderebbe con un avviso.</p>
      <p>Per cui &egrave; bene pensar prima alle scelte dell'utente. Il tipo Integer, 
        pu&ograve; andar bene, perch&eacute; &egrave; il tipo di dati pi&ugrave; 
        piccolo dopo il byte e pu&ograve; contenere numeri fino a 32767.</p>
      <p>Per dichiarare una variabile in Visual Basic, si scrive:<br>
        &nbsp;&nbsp;&nbsp;<b>Dim</b> NomeDellaVariabile <b>As</b> TipoDeiDati</p>
      <p> dove NomeDellaVariabile &egrave; un nome contenente lettere o numeri, 
        ma la cui prima, tuttavia, deve essere una lettera e TipoDeiDati &egrave; 
        uno dei tipi di dati visti prima. Un esempio di dichiarazione valida pu&ograve; 
        essere:</p>
      <blockquote> 
        <p>Dim <b class="sottolineato">Numero1</b> As Integer</p>
      </blockquote>
      <p> mentre non &egrave; valida una dichiarazione del genere:</p>
      <blockquote> 
        <p>Dim <b class="sottolineato">1Numero</b> As Integer</p>
      </blockquote>
      <p> poich&eacute; la prima posizione del nome non &egrave; una lettera.</p>
      <p><a name="STEP4"></a>Vediamo ora dove scrivere queste cose. Questo problema 
        in programmazione si chiama <i>Vita di una variabile</i> (gli inglesi 
        invece utilizzano la dizione <b>Scope</b>, area di visibilit&agrave; di 
        una variabile). Infatti se una variabile &egrave; dichiarata all'interno 
        di una funzione collegata ad un evento (vedi a tal proposito la <a href="bas_04.htm#STEP4">lezione 
        4</a>), la sua vita sar&agrave; legata a tale funzione. Noi non potremo 
        utilizzare quella variabile all'esterno della funzione legata all'evento. 
        Inoltre ogni volta che si verificher&agrave; tale evento il contenuto 
        della variabile sar&agrave; azzerato, perdendo il valore memorizzato prima. 
        Vediamo in pratica quanto detto finora. Apriamo la finestra del codice, 
        selezionate dalla zona sinistra in alto l'oggetto Form e dalla destra 
        l'evento Click e scriviamo questo codice:</p>
      <ol class="codicevb" start="1">
        <li>Private Sub Form_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim Numero1 As Integer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Numero1 = Numero1 + 1</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Label1.Caption = Numero1</li>
        <li>End Sub</li>
      </ol>
      <p><img src="../images/lezioni/bas05_02.jpg" width="195" height="146" align="right">Fatto 
        questo eseguiamo il programma attraverso la voce Avvia dal menu Esegui 
        e proviamolo.<br>
        Verr&agrave; visualizzata la finestra con la voce <i>Visual Basic &egrave; 
        un linguaggio molto divertente</i>.</p>
      <p>Infatti quello &egrave; il testo che abbiamo impostato alla Label1 nella 
        lezione precedente.</p>
      <p>Proviamo a cliccare su un punto qualunque della finesta, eccetto la barra 
        del titolo in alto, i pulsanti su essa e sulla nostra Label1.</p>
      <p>Sparir&agrave; il testo visto prima ed apparir&agrave; al suo posto il 
        numero 1.<br>
        Questo accade perch&eacute; nella routine legata all'evento Click sul 
        form abbiamo deciso che la Label1 avr&agrave; il valore della variabile 
        Numero1.<br>
        Dentro il nostro codice c'&egrave; scritto infatti:</p>
      <ol class="codicevb" start="2">
        <li>Dim Numero1 As Integer</li>
        <li>Numero1 = Numero1 + 1</li>
        <li>Label1.Caption = Numero1</li>
      </ol>
      <p>La prima riga &egrave; la definizione della variabile Numero1, di tipo 
        Integer (numero intero).</p>
      <p> La seconda riga dice al programma di aumentare il valore della variabile 
        Numero1 di 1 e memorizzare il risultato sulla variabile Numero1.<br>
        All'inizio tutte le variabili Integer sono impostate a zero. Quest'operazione 
        allora far&agrave; questo calcolo: Numero1 = 0 + 1<br>
        per cui alla fine dell'operazione la variabile Numero1 avr&agrave; il 
        valore 1.</p>
      <p>La terza riga imposta il contenuto della Label1 (ovvero il contenuto 
        della propriet&agrave; Caption dell'oggetto Label1) uguale al contenuto 
        della variabile Numero1. Per cui all'interno del Form apparir&agrave; 
        1.</p>
      <p>Ma che succede se l'utente clicca nuovamente sul form?<br>
        Ci si potrebbe aspettare che il secondo click producesse il numero 2 e 
        cos&igrave; via per i click successivi.<br>
        Ma non &egrave; cos&igrave;. Infatti la vita della variabile Numero1 inizia 
        dal punto della sua dichiarazione e finisce dove termina la <a href="../glossary/r.htm#ROUTINE">routine</a> 
        dentro la quale la variabile &egrave; dichiarata; quindi la variabile 
        Numero1 <i>muore</i> all'uscita della routine legata all'evento Click. 
        Per cui alla sua successiva dichiarazione la variabile non <i>ricorda</i> 
        il valore che ha avuto <i>nelle vite precedenti</i> e le verr&agrave; 
        sempre assegnato il valore iniziale 0.</p>
      <p>Se volessimo dichiarare una variabile il cui valore non viene azzerato 
        ogni volta, dovremmo dichiarare la variabile all'interno di un <a href="../glossary/m.htm#MODULO">modulo</a> 
        <img src="../images/ide/modulo.gif" width="16" height="16" align="absmiddle"> 
        oppure nell'area dedicata alle dichiarazioni del form. La creazione dei 
        moduli la vedremo pi&ugrave; avanti. La seconda &egrave; facilmente accessibile, 
        basta cliccare sulla lista dedicata agli oggetti nella finestra del codice 
        e scegliere la voce <b>(generale)</b> e sulla lista di destra scegliere 
        la voce <b>(dichiarazioni)</b>.</p>
      <p>Proviamo ora a copiare la riga dichiarazione della variabile Numero1 
        nell'area delle dichiarazioni, ricordandoci di cancellare quella dichiarata 
        precedentemente, perch&eacute; non possono esistere due variabili con 
        lo stesso nome nella stessa area.<br>
        Otteniamo quindi il seguente codice:</p>
      <ol class="codicevb" start="1">
        <li>Dim Numero1 As Integer</li>
        <li></li>
        <li>Private Sub Form_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Numero1 = Numero1 + 1</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Label1.Caption = Numero1</li>
        <li>End Sub</li>
      </ol>
      <p>Eseguiamo il programma e vediamo che succede!<br>
        Ad ogni click del mouse sul form il numero (la Label1) aumenter&agrave; 
        di 1 perch&eacute; la vita della variabile Numero1 non cessa di esistere 
        all'uscita della routine <b>Form_Click</b>, ed al successivo richiamo 
        il suo valore sar&agrave; ricordato. L'utente potr&agrave; cliccare fino 
        a 32767 volte e vedere il numero aumentare. Se cliccasse un'altra volta 
        in pi&ugrave; accadrebbe che la variabile Numero1 andrebbe in <a href="../glossary/o.htm#OVERFLOW">overflow</a> 
        e si genererebbe un errore, perch&eacute; la tipologia di dati Integer 
        pu&ograve; contenere numeri fino a 32767.<br>
        <br>
      </p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo testo */
google_ad_slot = "6726967947";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <!-- #EndEditable --></td>
  </tr>
</table>

<table width="100%">
  <tr> 
    <td><!-- #BeginEditable "FINALE" -->
      <p>&Egrave; bene limitare l'uso delle variabili dichiarate nella zona dichiarazioni, 
        poich&eacute; la loro vita durer&agrave; fintanto che vivr&agrave; l'oggetto 
        (il form o la classe) nel quale esse sono dichiarate.</p>
      <p> Se ci dovesse servire una variabile per fare la somma di 5 numeri e 
        poi il valore di questa non ci servisse pi&ugrave;, sarebbe del tutto 
        inutile e rischioso dichiarare la variabile nella zona dichiarazioni. 
        Dichiareremo la variabile all'interno della routine dentro la quale ci 
        serve.</p>
      <p>Cos&igrave; facendo semplificheremo il lavoro al computer, ed allontaneremo 
        la possibilit&agrave; di commettere errori involontari.</p>
      <!-- #EndEditable -->
      <p align="right" class="credits2"><!-- #BeginEditable "CREDITS" --><a href="../vbmail.htm?id=1">Fibia 
        FBI</a><br>
        28 Ottobre 2000<!-- #EndEditable --></p>
      <!-- #BeginLibraryItem "/Library/Toolbar.lbi" -->
      <table width="80%" border="1" cellspacing="1" cellpadding="3" align="center" bordercolor="#000000" class="dontprint">
        <tr> 
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
            <span class="size1">Scarica il progetto</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
            <span class="size1">Scarica il testo dell'articolo</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
            <span class="size1">Stampa l'articolo</span></a></td>
        </tr>
      </table><!-- #EndLibraryItem -->
    </td>
  </tr>
</table>
<table width="100%" border="0" cellspacing="2" cellpadding="2">
  <tr>
    <td align="left"><!-- #BeginEditable "LEZIONEPREC" --><a href="bas_04.htm"><img src="../images/vbprev.jpg" width="49" height="32" align="absmiddle" border="0"> 
      Torna alla quarta lezione</a><!-- #EndEditable --></td>
    <td align="right"><!-- #BeginEditable "LEZIONESUCC" --><a href="bas_06.htm">Vai 
      alla sesta lezione <img src="../images/vbnext.jpg" width="49" height="32" align="absmiddle" border="0"></a><!-- #EndEditable --></td>
  </tr>
</table>

<hr width="80%">
<table width="100%">
  <tr>
    <td width="100%" align="center">
      <script language="Javascript">Banner();</script>
      <!--#echo banner=""-->
    </td>
  </tr>
</table>
<script language="Javascript">FibiaWebStats();</script>
</body>
<!-- #EndTemplate --></html>
