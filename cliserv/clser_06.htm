<html><!-- #BeginTemplate "/Templates/ClientServer.dwt" -->
<head>
<script language="JavaScript" src="../funzioni.js"></script>
<script language="JavaScript" src="../scroller.js"></script>
<!-- #BeginEditable "doctitle" --> 
<title>Dimostrazione del Nagle Algorithm</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../stili.css" rel="stylesheet" type="text/css" title="stili">
<link href="../codicevb.css" rel="stylesheet" type="text/css" title="codicevb">
<link href="../colori.css" rel="stylesheet" type="text/css" title="colori">
<meta name="description" content="Visual Basic Simple &egrave; l'unico sito in Italia che tratta la programmazione in Visual Basic in un'ottica mai vista prima d'ora. Tutti gli articoli sono spiegati passo dopo passo ed in una maniera davvero semplice per consentire a tutti di comprendere gli argomenti trattati.">
<meta name="keywords" content="VB, Visual, Basic, Simple, programmazione, codici, esempi, manuali, studio, sviluppo, ActiveX, OCX, articoli, notizie, apprendere, QBasic, API, COM, database">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td width="400" align="left" bgcolor="#FFFFFF"><img src="../images/vbslogo.jpg" width="400" height="80" border="0" alt="Visual Basic Simple"></td>
    <td width="100%" align="right" bgcolor="#FFFFFF"> 
      <div class="intestazioni"><a href="../home.htm">Home Page</a> <a href="../home.htm"><img src="../images/icons/dothome.gif" align="absmiddle" border="0" alt="Home Page" width="25" height="25"></a><br>
        <a href="../history.htm">Novit&agrave;</a> <a href="../history.htm"><img src="../images/icons/dotinfo.gif" align="absmiddle" border="0" alt="Informazioni su VB Simple" width="25" height="25"></a><br>
        <a href="../help.htm">Aiuto</a> <a href="../help.htm"><img src="../images/icons/dothelp.gif" align="absmiddle" border="0" alt="Hai bisogno d'aiuto?" width="25" height="25"></a></div>
    </td>
    <td width="160" align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 160x90, creato 02/02/09 */
google_ad_slot = "8970907891";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></td>
  </tr>
</table>

<div align="center"> 
  <div class="titolo"><!-- #BeginEditable "TITOLO" -->Dimostrazione del Nagle 
    Algorithm<!-- #EndEditable --> 
    <!-- #BeginEditable "API" --><img src="../images/api.gif" width="34" height="24" align="absmiddle"><!-- #EndEditable --></div>
  <script language="Javascript">NomePagina();</script>
  <table width="80%" border="1" cellspacing="1" cellpadding="3" bordercolorlight="#000000" bordercolordark="#000000" class="dontprint">
    <tr class="size0"> 
      <td align="center" width="25%"><a href="../ftv21/cliserv.htm" target="treeframe"><img src="../images/icons/search%20window.gif" width="16" height="16" border="0" alt="Sincronizza Indice"><br>
        Sincronizza Indice</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
        Scarica il progetto</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
        Testo dell'articolo</a></td>
      <td align="center" width="25%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
        Stampa l'articolo</a></td>
    </tr>
  </table>
  </div>
<table width="100%" border="0">
  <tr> 
    <td width="80%"> 
      <table width="100%"><tr><td align="left" nowrap><style type="text/css">
@import url(http://www.google.com/cse/api/branding.css);
</style>
<div class="cse-branding-right" style="background-color:#FFFFFF;color:#000000">
  <div class="cse-branding-form">
    <form action="http://www.google.it/cse" id="cse-search-box">
      <div>
        <input type="hidden" name="cx" value="partner-pub-8218922773694577:rv2o52-qh5a" />
        <input type="hidden" name="ie" value="ISO-8859-1" />
        <input type="text" name="q" size="20" />
        <input type="submit" name="sa" value="Cerca" />
      </div>
    </form>
  </div>
  <div class="cse-branding-logo">
    <img src="http://www.google.com/images/poweredby_transparent/poweredby_FFFFFF.gif" alt="Google" />
  </div>
  <div class="cse-branding-text">
    Ricerca personalizzata
  </div>
</div></td><td align="right">
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><!-- #BeginEditable "DIFFICOLTA" --><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"> 
        2<!-- #EndEditable --> / 5</p>
</td></tr></table>
      <script language="JavaScript">ShowArticlesScroller();</script><!-- #BeginEditable "CORPO" -->
      <p>Questo semplice esempio era stato scritto per dimostrare ad un amico 
        l'azione del <i>Nagle Algorithm</i>, definito nella <a href="../glossary/r.htm#RFC">RFC</a> 
        896, ma poich&eacute; la dimostrazione pu&ograve; interessare pi&ugrave; 
        di una persona ho deciso di renderlo pubblico all'interno di VBSimple.<br>
        Vedi anche <a href="../news/news_04_3.htm#STEP2">TCP/IP Le risposte alle 
        domande pi&ugrave; frequenti</a>.</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo grafica */
google_ad_slot = "0981518759";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Il TCP/IP possiede alcuni naturali <i>'mezzi di difesa'</i> contro l'inondazione 
        della rete con piccoli pacchetti. Tali difese sono maggiormente presenti 
        all'invio dei dati da un punto di rete ad un altro. La principale di queste 
        soluzioni di protezione &egrave; il <a href="../glossary/n.htm#NAGLEALGORITHM">Nagle 
        Algorithm</a>, un codice presente nello stack TCP/IP con lo scopo di ritardare 
        l'invio di un nuovo pacchetto di dati fintanto che il TCP/IP non ha ricevuto 
        l'<a href="../glossary/a.htm#ACK">ACK</a> (Acknowledgment) per il pacchetto 
        precedente.</p>
      <p>Ci&ograve; determina che quando un programma prova ad inviare due o pi&ugrave; 
        pacchetti rapidamente, il primo viene inviato correttamente, qualunque 
        sia la sua dimensione, mentre tutti i rimanenti pacchetti sono conservati 
        e raggruppati in un unico pacchetto che sar&agrave; inviato soltanto dopo 
        il ricevimento dell'ACK del primo pacchetto e <b>comunque</b> non prima 
        di 200 millisecondi dall'invio del primo pacchetto.</p>
      <p>Se ne deduce che non &egrave; possibile inviare ad un solo socket pi&ugrave; 
        di 5 pacchetti per secondo. Tutti gli eventuali pacchetti inviati tra 
        una pausa e l'altra saranno raggruppati in uno solo e trasmessi allo scattare 
        del momento giusto. Inoltre non sar&agrave; possibile inviare pi&ugrave; 
        di un piccolo pacchetto senza ACK.</p>
      <p>Tale regola vale per&ograve; soltanto per i pacchetti piccoli; tutti 
        i pacchetti di dimensione uguale o maggiore a quella trasportabile con 
        un singolo invio (<a href="../glossary/c.htm#COSTANTE">costante</a> <img src="../images/ide/costante.gif" width="16" height="16" align="absmiddle"> 
        <a href="../glossary/a.htm#API">API</a> SO_SNDBUF - Vedi anche <a href="clser_04.htm">Trasferimento 
        di files tra Client e Server</a>) saranno inviati immediatamente, senza 
        la normale attesa.</p>
      <p>Vediamo un progettino molto semplice che dimostra quanto finora detto; 
        un programma client si collegher&agrave; ad un programma server che dopo 
        la connessione invier&agrave; una serie di numeri al client. Il client 
        riprodurr&agrave; tutti i pacchetti di dati ricevuti in una ListBox e 
        terr&agrave; il conto del numero di pacchetti ricevuti.</p>
      <p><img src="../images/cliserv/cliserv006_01.jpg" width="214" height="112" align="right" alt="Figura 1">Il 
        server si compone di un form con una <i>ListBox</i><img src="../images/controls/listbox.gif" width="25" height="25" align="absmiddle">di 
        nome <b>Informazioni</b>, un controllo <i>Winsock</i><img src="../images/controls/winsock.gif" width="25" height="25" align="absmiddle">di 
        nome <b>Socket</b> con la propriet&agrave; <img src="../images/ide/propr.gif" width="16" height="16" align="absmiddle"> 
        <i>LocalPort</i> impostata a 1500 e tre <i>CommandButton</i><img src="../images/controls/commandbutton.gif" width="25" height="25" align="absmiddle">di 
        nome <b>InvioNormale</b>, <b>InvioDoEvents</b> e <b>InvioSleep</b> e riproducono 
        tre test che effettueremo per dimostrare l'azione dell'algoritmo. Il codice 
        &egrave; altrettanto semplice:</p>
      <ol class="codicevb" start="1">
        <li>Option Explicit</li>
        <li>Private Declare Sub Sleep Lib &quot;kernel32&quot; (ByVal dwMilliseconds 
          As Long)</li>
        <li></li>
        <li>Private Sub Form_Load()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Socket.Listen</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Me.Caption = &quot;Attesa connessione...&quot;</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Alla riga 2 abbiamo dichiarato la Sub <a href="../glossary/a.htm#API">API</a> 
        <i><b>Sleep</b></i> che utilizzeremo per effettuare una pausa all'interno 
        del nostro progetto. Sar&agrave; vista pi&ugrave; avanti.</p>
      <p>All'avvio del form il socket sar&agrave; messo in ascolto e sar&agrave; 
        modificata la <i>Caption</i> del form.</p>
      <ol class="codicevb" start="9">
        <li>Private Sub Informazioni_DblClick()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Informazioni.Clear</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Per ben valutare i dati del nostro esempio abbiamo aggiunto questa funzioncina 
        che cancella il contenuto della ListBox <b>Informazioni</b> al doppio 
        click dell'utente su di essa.</p>
      <ol class="codicevb" start="13">
        <li>Private Sub Socket_ConnectionRequest(ByVal requestID As Long)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Socket.Close</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Socket.Accept requestID</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Me.Caption = &quot;Connessione accettata! 
          Inviare i dati.&quot;</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>All'arrivo di una richiesta di connessione, essa sar&agrave; subito accettata 
        e la <i>Caption</i> del form sar&agrave; modificata.</p>
      <ol class="codicevb" start="19">
        <li>Private Sub Socket_SendProgress(ByVal bytesSent As Long, ByVal bytesRemaining 
          As Long)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Informazioni.AddItem bytesSent &amp; &quot; 
          bytes inviati&quot;</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Tutti i pacchetti inviati tramite <b>Socket</b> saranno registrati nella 
        ListBox <b>Informazioni</b>.</p>
      <p>Le funzioni che seguono sono i nostri tre test di dimostrazione del Nagle 
        Algorithm.</p>
      <ol class="codicevb" start="23">
        <li>Private Sub InvioNormale_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim i As Integer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;For i = 1 To 8192</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Socket.SendData CStr(i)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Next i</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Il primo &egrave; un invio normale, non controllato e senza alcuna attesa 
        dei numeri compresi tra 1 8192, trasformati in stringa.</p>
      <ol class="codicevb" start="30">
        <li>Private Sub InvioDoEvents_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim i As Integer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;For i = 1 To 500</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Socket.SendData CStr(i)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoEvents</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Next i</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Il secondo test effettua l'invio dei numeri da 1 a 500 con l'utilizzo 
        dell'istruzione DoEvents, da molti considerata la soluzione a tanti problemi.<br>
        Essa in realt&agrave; non risolve il problema ma forza il rilascio dei 
        dati del Winsock e rallenta leggermente l'esecuzione del programma.</p>
      <ol class="codicevb" start="38">
        <li>Private Sub InvioSleep_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim i As Integer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;For i = 1 To 50</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Socket.SendData CStr(i)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoEvents</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sleep 201</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Next i</li>
        <li>End Sub</li>
      </ol>
      <p>Il terzo test invece &egrave; mirato ad evitare il Nagle Algorithm a 
        patto di possedere una linea di trasferimento veloce. Infatti, dopo l'invio, 
        confermato con l'istruzione DoEvents, tra ogni pacchetto forzeremo un'attesa 
        di oltre 200 millisecondi facendo scattare il tempo di raccolta dei dati. 
        L'attesa viene generata tramite chiamata della Sub API <i>Sleep</i>. Vedremo 
        l'applicazione dei tre test pi&ugrave; avanti, dopo aver analizzato il 
        semplicissimo client che si collegher&agrave; al nostro server.</p>
      <hr>
    <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* Contenuti 468x60 */
google_ad_slot = "0785185013";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p><img src="../images/cliserv/cliserv006_02.jpg" width="254" height="151" align="right" alt="Figura 2">Il 
        programma si compone di un form con soli quattro controlli: una <i>ListBox</i><img src="../images/controls/listbox.gif" width="25" height="25" align="absmiddle">di 
        nome <b>Informazioni</b>, un controllo <i>Winsock</i><img src="../images/controls/winsock.gif" width="25" height="25" align="absmiddle">di 
        nome <b>Socket</b>, un <i>CommandButton</i><img src="../images/controls/commandbutton.gif" width="25" height="25" align="absmiddle">di 
        nome <b>Connetti</b> ed una <i>TextBox</i><img src="../images/controls/textbox.gif" width="25" height="25" align="absmiddle">di 
        nome <b>IndirizzoIP</b>.</p>
      <p>Il funzionamento &egrave; assolutamente semplicissimo: l'utente inserisce 
        l'indirizzo <a href="../glossary/i.htm#IP">IP</a> nella casella apposita 
        e preme il pulsante <b>Connetti</b>. Il codice &egrave; altrettanto semplice:</p>
      <ol class="codicevb" start="1">
        <li>Option Explicit</li>
        <li></li>
        <li>Private Sub Connetti_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Socket.Connect IndirizzoIP.Text, 1500</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Me.Caption = &quot;0&quot;</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Alla pressione del pulsante <b>Connetti</b> il socket si collegher&agrave; 
        all'host specificato nella <i>TextBox</i> <b>IndirizzoIP</b> sulla porta 
        1500 e la Caption del form segner&agrave; il numero 0.</p>
      <ol class="codicevb" start="8">
        <li>Private Sub Informazioni_DblClick()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Informazioni.Clear</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Me.Caption = &quot;0&quot;</li>
        <li>End Sub</li>
        <li></li>
      </ol>
      <p>Anche nel client il doppio click sulla ListBox <b>Informazioni</b> ne 
        azzerer&agrave; il contenuto e riporter&agrave; il conteggio nella Caption 
        del form a 0. </p>
      <ol class="codicevb" start="13">
        <li>Private Sub Socket_DataArrival(ByVal bytesTotal As Long)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim DATI As String</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Me.Caption = CStr(Val(Me.Caption) + 1)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Socket.GetData DATI</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Informazioni.AddItem Now &amp; &quot; - &quot; 
          &amp; DATI</li>
        <li>End Sub</li>
      </ol>
      <p>All'arrivo di dati sul socket, il numero contenuto nella <i>Caption</i> 
        sar&agrave; aumentato di 1, i dati in arrivo saranno estratti mediante 
        il metodo <i><b>GetData</b></i> e saranno inseriti nella <i>ListBox</i> 
        <b>Informazioni</b> assieme all'orario di arrivo.</p>
      <hr>
      <p>Possiamo passare adesso alla dimostrazione pratica dell'azione del Nagle 
        Algorithm. </p>
      <table width="100%" border="0" cellspacing="0" cellpadding="0">
        <tr align="center"> 
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_03.jpg" width="214" height="112" alt="Figura 3"><br>
            <b>Figura 3</b></td>
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_04.jpg" width="254" height="151" alt="Figura 4"><br>
            <b>Figura 4</b></td>
        </tr>
        <tr> 
          <td colspan="2" valign="top"> 
            <p>Avviamo i due progetti (nel nostro caso sullo stesso computer, 
              in modo da evitare tutti gli eventuali ritardi di trasferimento 
              dei dati), inseriamo il numero IP del server nel nostro Client e 
              premiamo il pulsante <i> <b>Connetti</b></i>.</p>
            <p>Se il server ed il client sono in esecuzione sullo stesso computer 
              specificare l'indirizzo di <a href="../glossary/l.htm#LOOPBACK">loopback</a> 
              <i><b>127.0.0.1</b></i>. Stabilita la connessione possiamo passare 
              ai tre test.</p>
            <hr>
            <p>&nbsp;</p>
          </td>
        </tr>
        <tr align="center"> 
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_05.jpg" width="214" height="112" alt="Figura 5"><br>
            <b>Figura 5</b></td>
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_06.jpg" width="254" height="151" alt="Figura 6"><br>
            <b>Figura 6</b></td>
        </tr>
        <tr> 
          <td colspan="2" valign="top"> 
            <p>Il primo test consiste nell'inviare i primi 8192 numeri senza effettuare 
              alcuna pausa.<br>
              Possiamo notare che l'invio dei dati &egrave; fatto in un solo pacchetto; 
              infatti sono inviati in un solo pacchetto 31661 bytes, eccedendo 
              quindi il limite massimo di dati in un pacchetto.</p>
            <p>Sul client infatti i dati non arrivano in un solo pacchetto, ma 
              arrivano 4 pacchetti (vedi <i>Caption</i> del form) molto grossi 
              nello stesso momento.</p>
            <p>Il Nagle Algorithm non ha avuto applicazione poich&eacute; i dati 
              sono stati inviati in un solo grande pacchetto, che poi il TCP/IP 
              ha frammentato nel trasporto.</p>
            <hr>
            <p>&nbsp;</p>
          </td>
        </tr>
        <tr align="center"> 
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_07.jpg" width="214" height="112" alt="Figura 7"><br>
            <b>Figura 7</b></td>
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_08.jpg" width="254" height="151" alt="Figura 8"><br>
            <b>Figura 8</b></td>
        </tr>
        <tr> 
          <td colspan="2" valign="top"> 
            <p>Il secondo test consiste nell'inviare al client i primi 500 numeri 
              e richiamare dopo ogni invio l'istruzione DoEvents che permette 
              al controllo Winsock di svolgere la sua azione di invio, che non 
              ha potuto effettuare nel test precedente.</p>
            <p>Cos&igrave; infatti accade che i dati dal server sono inviati in 
              maniera regolare, ovvero byte per byte a secondo dell'ampiezza del 
              numero (1 byte per i numeri compresi tra 1 e 9, 2 bytes per i numeri 
              compresi tra 10 e 99, etc..).</p>
            <p>Tuttavia, i dati ricevuti dal client sono totalmente differenti 
              da quelli inviati. Possiamo notare un primo pacchetto di un solo 
              byte e tanti altri pacchetti di pi&ugrave; bytes. I 31661 bytes 
              inviati sono stati separati in 28 pacchetti, di cui il primo costituito 
              da un solo byte.</p>
            <p>Tutto questo perch&eacute; il Nagle Algorithm &egrave; entrato 
              in azione. Esso infatti stabilisce che pu&ograve; essere inviato 
              soltanto 1 pacchetto (di qualsiasi dimensione) senza che sia ritornato 
              l'<a href="../glossary/a.htm#ACK">ACK</a> di tale pacchetto. Pertanto, 
              nell'attesa dell'ACK e del trascorrere dei 200 millisecondi, il 
              <a href="../glossary/b.htm#BUFFER">buffer</a> di dati da inviare 
              si ingrandisce concatenando i numeri da inviare.</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo testo */
google_ad_slot = "6726967947";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
            <p>Possiamo anche notare, scrollando la lista, che non saranno inviati 
              pi&ugrave; di 5 pacchetti per secondo, proprio a causa della necessaria 
              attesa di 200 millisecondi tra ogni pacchetto.</p>
            <hr>
            <p>&nbsp;</p>
          </td>
        </tr>
        <tr align="center"> 
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_09.jpg" width="214" height="112" alt="Figura 9"><br>
            <b>Figura 9</b></td>
          <td width="50%" valign="top"><img src="../images/cliserv/cliserv006_10.jpg" width="254" height="151" alt="Figura 10"><br>
            <b>Figura 10</b></td>
        </tr>
        <tr> 
          <td colspan="2" valign="top"> 
            <p>L'ultimo test servir&agrave; invece per evitare l'azione del Nagle 
              Algorithm (almeno su linee veloci). Infatti tra un invio e l'altro 
              sar&agrave; eseguita l'istruzione DoEvents che permette al socket 
              di inviare i dati (come abbiamo visto nel test precedente) ed effettueremo 
              anche una pausa di 201 millisecondi, per far scattare il limite 
              di attesa minimo per ogni pacchetto.<br>
              Poich&eacute; il test &egrave; ovviamente pi&ugrave; lento a causa 
              delle pause forzate, i numeri che saranno inviati andranno da 1 
              a 50.</p>
            <p>Il test, nel nostro esempio, ha inviato i dati nella maniera corretta. 
              Il server ha inviato i dati byte per byte a seconda della dimensione 
              del numero da trasferire. Il client ha ricevuto i dati nella maniera 
              corretta. Sono arrivati infatti 50 pacchetti ed i numeri sono rappresentati 
              nel formato originale, senza alcun raggruppamento.</p>
            <p>Infatti nei 201 millisecondi di pausa l'ACK ha avuto il tempo di 
              arrivare e non sono stati inviati pi&ugrave; di 5 pacchetti per 
              secondo; pertanto tutti i dati inviati sono arrivati nella maniera 
              originale.</p>
          </td>
        </tr>
      </table>
      <p>I tre test dimostrano le tre modalit&agrave; di invio dei dati: consecutivamente, 
        mediante DoEvents e con forzatura d'attesa.</p>
      <p>Sebbene in molti casi l'utilizzo di un semplice DoEvents pu&ograve; bastare 
        a regolare il flusso di dati tra client e server, in questo caso &egrave; 
        palese che non &egrave; assolutamente sufficiente inserire un DoEvents 
        per risolvere tutti i problemi di sincronizzazione.</p>
      <p>&Egrave; possibile disabilitare l'azione del <b><i>Nagle Algorithm</i></b> 
        mediante l'utilizzo della funzione <a href="../glossary/a.htm#API">API</a> 
        <i><b>setsockopt</b></i>, combinata con la <a href="../glossary/c.htm#COSTANTE">costante</a> 
        <img src="../images/ide/costante.gif" width="16" height="16" align="absmiddle"> 
        API <b>TCP_NODELAY</b>.<br>
        <br>
      </p>
      <!-- #EndEditable --></td>
  </tr>
</table>

<table width="100%">
  <tr> 
    <td><!-- #BeginEditable "FINALE" --> 
      <p>Questo esempio serviva soltanto a dimostrare l'esistenza ed il funzionamento 
        dell'algoritmo di protezione dall'inondamento di dati nella rete e non 
        a fornire un'efficiente soluzione per evitarlo.</p>
      <!-- #EndEditable -->
      <p align="right" class="credits2"><!-- #BeginEditable "CREDITS" --><a href="../vbmail.htm?id=1">Fibia 
        FBI</a><br>
        4 Giugno 2001<!-- #EndEditable --></p>
      <!-- #BeginLibraryItem "/Library/Toolbar.lbi" -->
      <table width="80%" border="1" cellspacing="1" cellpadding="3" align="center" bordercolor="#000000" class="dontprint">
        <tr> 
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
            <span class="size1">Scarica il progetto</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
            <span class="size1">Scarica il testo dell'articolo</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
            <span class="size1">Stampa l'articolo</span></a></td>
        </tr>
      </table><!-- #EndLibraryItem -->
    </td>
  </tr>
</table>
<table width="100%" border="0" cellspacing="2" cellpadding="2">
  <tr>
    <td align="left"><a href="index.htm"><img src="../images/vbprev.jpg" width="49" height="32" align="absmiddle" border="0"> 
      Torna all'indice Client/Server</a></td>
    <td align="right">&nbsp;</td>
  </tr>
</table>

<hr width="80%">
<table width="100%">
  <tr>
    <td width="100%" align="center">
      <script language="Javascript">Banner();</script>
      <!--#echo banner=""-->
    </td>
  </tr>
</table>
<script language="Javascript">FibiaWebStats();</script>
</body>
<!-- #EndTemplate --></html>
