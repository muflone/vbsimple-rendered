<html><!-- #BeginTemplate "/Templates/ClientServer2.dwt" -->
<head>
<script language="JavaScript" src="../funzioni.js"></script>
<script language="JavaScript" src="../scroller.js"></script>
<!-- #BeginEditable "doctitle" --> 
<title>Tutorial per l'utilizzo del Winsock con Visual Basic</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../stili.css" rel="stylesheet" type="text/css" title="stili">
<link href="../codicevb.css" rel="stylesheet" type="text/css" title="codicevb">
<link href="../colori.css" rel="stylesheet" type="text/css" title="colori">
<meta name="description" content="Visual Basic Simple &egrave; l'unico sito in Italia che tratta la programmazione in Visual Basic in un'ottica mai vista prima d'ora. Tutti gli articoli sono spiegati passo dopo passo ed in una maniera davvero semplice per consentire a tutti di comprendere gli argomenti trattati.">
<meta name="keywords" content="VB, Visual, Basic, Simple, programmazione, codici, esempi, manuali, studio, sviluppo, ActiveX, OCX, articoli, notizie, apprendere, QBasic, API, COM, database">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td width="400" align="left" bgcolor="#FFFFFF"><img src="../images/vbslogo.jpg" width="400" height="80" border="0" alt="Visual Basic Simple"></td>
    <td width="100%" align="right" bgcolor="#FFFFFF"> 
      <div class="intestazioni"><a href="../home.htm">Home Page</a> <a href="../home.htm"><img src="../images/icons/dothome.gif" align="absmiddle" border="0" alt="Home Page" width="25" height="25"></a><br>
        <a href="../history.htm">Novit&agrave;</a> <a href="../history.htm"><img src="../images/icons/dotinfo.gif" align="absmiddle" border="0" alt="Informazioni su VB Simple" width="25" height="25"></a><br>
        <a href="../help.htm">Aiuto</a> <a href="../help.htm"><img src="../images/icons/dothelp.gif" align="absmiddle" border="0" alt="Hai bisogno d'aiuto?" width="25" height="25"></a></div>
    </td>
    <td width="160" align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 160x90, creato 02/02/09 */
google_ad_slot = "8970907891";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></td>
  </tr>
</table>

<div align="center"> 
  <div class="titolo"><!-- #BeginEditable "TITOLO" -->Tutorial per l'utilizzo 
    del Winsock con Visual Basic<!-- #EndEditable --> 
    <!-- #BeginEditable "API" --><!-- #EndEditable --></div>
  <script language="Javascript">NomePagina();</script>
  <table width="80%" border="1" cellspacing="1" cellpadding="3" bordercolorlight="#000000" bordercolordark="#000000" class="dontprint">
    <tr class="size0"> 
      <td align="center" width="25%"><a href="../ftv21/cliserv.htm" target="treeframe"><img src="../images/icons/search%20window.gif" width="16" height="16" border="0" alt="Sincronizza Indice"><br>
        Sincronizza Indice</a></td>
      <td align="center" width="25%"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
        Scarica il progetto</td>
      <td align="center" width="25%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
        Testo dell'articolo</a></td>
      <td align="center" width="25%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
        Stampa l'articolo</a></td>
    </tr>
  </table>
  </div>
<table width="100%" border="0">
  <tr> 
    <td width="80%"> 
      <table width="100%"><tr><td align="left" nowrap><style type="text/css">
@import url(http://www.google.com/cse/api/branding.css);
</style>
<div class="cse-branding-right" style="background-color:#FFFFFF;color:#000000">
  <div class="cse-branding-form">
    <form action="http://www.google.it/cse" id="cse-search-box">
      <div>
        <input type="hidden" name="cx" value="partner-pub-8218922773694577:rv2o52-qh5a" />
        <input type="hidden" name="ie" value="ISO-8859-1" />
        <input type="text" name="q" size="20" />
        <input type="submit" name="sa" value="Cerca" />
      </div>
    </form>
  </div>
  <div class="cse-branding-logo">
    <img src="http://www.google.com/images/poweredby_transparent/poweredby_FFFFFF.gif" alt="Google" />
  </div>
  <div class="cse-branding-text">
    Ricerca personalizzata
  </div>
</div></td><td align="right">
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><!-- #BeginEditable "DIFFICOLTA" --><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"> 
        2<!-- #EndEditable --> / 5</p>
</td></tr></table>
      <script language="JavaScript">ShowArticlesScroller();</script><!-- #BeginEditable "CORPO" --> 
      <p>La parte pi&ugrave; affascinante della programmazione in quasi tutti 
        i linguaggi &egrave; (secondo me) il Networking, cio&egrave; tutto quello 
        che riguarda le reti, locali o remote. La soddisfazione di realizzare 
        per la prima volta un programmino client/server &egrave; tanta, e grazie 
        alla facilit&agrave; d'uso del VB e del controllo <a href="../glossary/o.htm#OCX">OCX</a> 
        Winsock<img src="../images/controls/winsock.gif" width="25" height="25" align="absmiddle">alla 
        fine di questo breve tutorial saremo in grado di costruire sia il client 
        che il server e aggiungere tutte le funzionalit&agrave; che ci verranno 
        in mente, ma questo &egrave; lasciato alla fantasia e genialit&agrave; 
        del programmatore.</p>
      <hr>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo grafica */
google_ad_slot = "0981518759";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Quello che ci serve &egrave; solamente una discreta conoscenza dell'ambiente 
        di sviluppo e dei fondamenti del VB. Apriamo quindi l'<a href="../glossary/i.htm#IDE">IDE</a> 
        di Visual Basic e partiamo! Nella casella degli strumenti che di solito 
        si trova a sinistra ci sono tutti i <a href="../glossary/t.htm#THUNDER">controlli 
        standard</a>, ma non quello che serve a noi e che dovremo aggiungere. 
        Cliccando col destro all'interno della casella degli strumenti e scegliendo 
        &quot;Componenti…&quot;, oppure premendo <b>CTRL+T</b> si apre la finestra 
        che ci offre altri controlli. Andremo a scegliere da essi il <i><b>Microsoft 
        Winsock Control</b></i>.<br>
        Aggiungiamolo subito al nostro form ancora vuoto. Adesso possiamo cominciare 
        a capire cosa ci permette di fare questo controllo. La prima cosa che 
        succede quando interagiamo con un server &egrave; la richiesta di una 
        connessione e l'attesa della risposta con l'esito della nostra richiesta. 
        I primi due <a href="../glossary/e.htm#EVENTO">eventi</a><img src="../images/ide/evento.gif" width="16" height="16" align="absmiddle">che 
        vediamo sono quindi <b>&quot;Connect&quot;</b> e <b>&quot;DataArrival&quot;</b> 
        e si pu&ograve; intuire dal nome cosa fanno.</p>
      <hr>
      <p align="center" class="size3">CONNECT</p>
      <p>Questo evento ci connette ad un host e una porta specificati. Aggiungiamo 
        un <i>CommandButton</i><img src="../images/controls/commandbutton.gif" width="25" height="25" align="absmiddle">al 
        form e chiamiamolo <b>Connetti</b>. Rinominiamo il controllo Winsock1 
        in <b>wskClient</b> (o il nome che a voi piace di pi&ugrave; o sembra 
        pi&ugrave; facile da digitare).<br>
        Associamo quindi alla pressione del CommandButton il <a href="../glossary/m.htm#METODO">metodo</a> 
        <img src="../images/ide/metodo.gif" width="16" height="16" align="absmiddle"> 
        <i>wskClient.Connect</i>.</p>
      <p>Grazie all'autocompletamento (<a href="../glossary/i.htm#INTELLISENSE">Intellisense</a>) 
        ci vengono chiesti due parametri: l'host e la porta. Per i nostri scopi 
        usiamo come host quello del nostro provider o di un altro server di posta 
        che conosciamo e come porta la 25. Ci connettiamo cio&egrave; al servizio 
        di posta del server che abbiamo scelto. Non avendo ancora implementato 
        l'evento<img src="../images/ide/evento.gif" width="16" height="16" align="absmiddle"><b>DataArrival</b>, 
        non saremo in grado di vedere quello che il server ci risponde. Pi&ugrave; 
        avanti nel tutorial vedremo come controllare comunque lo stato del winsock 
        per capire se &egrave; in errore, in stato di &quot;connessione avvenuta&quot; 
        o di &quot;connessione in corso&quot;.</p>
      <p>Quello che abbiamo fatto, la connessione che abbiamo stabilito, &egrave; 
        praticamente uguale a quella che potremmo fare con <i>Telnet</i>. Quello 
        che otteniamo &egrave; una routine simile a questa:</p>
      <ol class="codicevb" start="1">
        <li>Private Sub Connetti_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;WskClient.Connect host, porta</li>
        <li>End Sub</li>
      </ol>
      <hr>
      <p align="center" class="size3">DATA ARRIVAL</p>
      <p>Aggiungiamo subito l'evento<img src="../images/ide/evento.gif" width="16" height="16" align="absmiddle">DataArrival 
        per sentire quello che il server ha da dirci. Per poterlo visualizzare 
        aggiungiamo un controllo TextBox <img src="../images/controls/textbox.gif" width="25" height="25" align="absmiddle"> 
        che chiameremo <b>txtReply</b>. All'interno della Sub wskClient_DataArrival 
        aggiungiamo il metodo <img src="../images/ide/metodo.gif" width="16" height="16" align="absmiddle"> 
        <i>GetData</i> che ci chiede come parametri una variabile nella quale 
        mettere i dati che arrivano e che dovr&agrave; essere di tipo stringa, 
        dichiarata all'inizio.<br>
        Ci vengono anche chiesti il tipo di dati e la lunghezza. Gli ultimi due 
        parametri, visto che non abbiamo particolari esigenze, li lasciamo vuoti. 
        Avremo quindi una Sub simile a questa:</p>
      <ol class="codicevb" start="4">
        <li>Private Sub wskClient_DataArrival(ByVal bytesTotal As Long)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskClient.GetData a</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;txtReply = a &amp; VbCrLf</li>
        <li>End Sub</li>
      </ol>
      <p>Con queste due semplici routine siamo gi&agrave; in grado di connetterci 
        ad un server di posta e di ricevere il suo messaggio di benvenuto. Direi 
        che &egrave; gi&agrave; un ottimo risultato.</p>
    <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* Contenuti 468x60 */
google_ad_slot = "0785185013";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Per sfizio si pu&ograve; provare a cambiare porta per vedere le stringhe 
        che ci arrivano quando ci connettiamo ad altri servizi, come Ftp, Telnet, 
        Finger e anche la risposta dell'Http Server sulla porta 80. Con in mano 
        queste pochissime nozioni e usando un po di fantasia e di creativit&agrave;, 
        si possonon costruire degli scanner per trovare server di posta che montano 
        SemdMail, Ftp Server che vogliamo, demoni che ascoltano sulla porta 51 
        per il servizio di DNS o sulla porta 79 per il servizio di Finger.</p>
      <p>Basta <a href="../glossary/p.htm#PARSING">parserizzare</a> la stringa 
        che ci arriva e cercare nella risposta quello che ci interessa. Fatto 
        questo si da in pasto al programmino un range di IP tra i quali cercare. 
        Per uno scanner di questo tipo che sia anche minimamente performante, 
        occore conoscere per&ograve; gli Array di socket che studieremo un'altra 
        volta.</p>
      <p>Avete provato a connettervi a qualche server di posta ma non avete avuto 
        successo? Prima di provare col nostro programmino, proviamo col Telnet, 
        per verificare se il server scelto ci consente di connetterci.</p>
      <p>La stringa 'a' che abbiamo inserito nel metodo <b>GetData</b> deve essere 
        dichiarata tale all'inizio del listato della funzione.<br>
        Era una cosa che avevo omesso di dire, ma dovrebbe essere buona abitudine 
        dichiarare qualsiasi tipo di variabile si usi, anche per chiarezza mentale 
        o per chiarezza per chi legge il codice. Quindi:</p>
      <ol class="codicevb" start="4">
        <li>Private Sub wskClient_DataArrival(ByVal bytesTotal As Long)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim a As String</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskClient.GetData a</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;txtReply = a &amp; VbCrLf</li>
        <li>End Sub</li>
      </ol>
      <p>Adesso per&ograve; facciamo qualcosa di pi&ugrave; utile, cio&egrave; 
        inviamo qualcosa al server con quale siamo collegati. Senza neanche spremerci 
        troppo potremmo immaginare che il metodo che ci permetter&agrave; di inviare 
        una stringa sar&agrave; qualcosa tipo <i>wskClient.Send(data as String)</i>.</p>
      <p>Ci siete andati vicini. Il metodo &egrave; <b>SendData</b> e richiede 
        un parametro che sar&agrave; proprio la stringa che vogliamo inviare. 
        Aggiungiamo un'altra TextBox <img src="../images/controls/textbox.gif" width="25" height="25" align="absmiddle">e 
        un altro pulsante che chiameremo rispettivamente <b>txtOut</b> e <b>Invia</b>. 
        Alla pressione del Button associamo il metodo creando cos&igrave; una 
        routine del tipo:</p>
      <ol class="codicevb" start="9">
        <li>Private Sub Invia_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim data As String</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;data = txtOut</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskClient.SendData data &amp; vbCrLf</li>
        <li>End Sub</li>
      </ol>
      <p>Il <b>vbCrLf</b> &egrave; una <a href="../glossary/c.htm#COSTANTE">costante</a> 
        <img src="../images/ide/costante.gif" width="16" height="16" align="absmiddle"> 
        equivalente ad 'Invio'. Per chi ancora non lo sapesse significa <i><b>'Visual 
        Basic Carriage Return Line Feed'</b></i>. Praticamente ritorno a capo 
        con inizio di linea nuova. Nelle versioni precedenti di VB occorreva inviare 
        i caratteri ASCII corrispondenti che sono il 10 e il 13.</p>
      <p>L'evento <i>DataArrival</i>, una volta implementato correttamente da 
        noi, lavora da solo e si attiva ogni volta che ci arrivano dei dati in 
        risposta. Avrete gi&agrave; capito quindi che abbiamo costruito null'altro 
        che un Telnet dal quale possiamo inviare stringhe e leggere le risposte 
        del server. Abbiamo in mano quindi lo scheletro di un'applicazione Client 
        e le cose che fa sono tre:</p>
      <ul>
        <li>Connettersi ad un Server;</li>
        <li>Ricevere i dati che gli arrivano da questi;</li>
        <li>Inviare stringhe</li>
      </ul>
      <hr>
      <p>Sarebbe ora carino costruire un Server da far girare in locale e vedere 
        le due applicazioni che dialogano secondo un protocollo di nostra invenzione. 
        Pensiamo allora cosa deve fare un server. Per prima cosa deve stare in 
        ascolto su una determinata porta e al momento di una richiesta accettarla 
        o anche rifiutarla.</p>
      <p>Dopo aver accettato la connessione il server non &egrave; pi&ugrave; 
        riconoscibile dal client a livello di metodi, perch&eacute; dovr&agrave; 
        inviare lui stesso delle stringhe e gestire quelle che gli arrivano con 
        i metodi SendData e GetData in un Evento DataArrival. Di diverso dal client 
        possiede solo un metodo che gli permette di ascoltare una determinata 
        porta e uno che gli permette di accettare la connessione che gli viene 
        richiesta o di rifiutarla (se ad esempio arrivasse da un host che vogliamo 
        ignorare).</p>
      <p>In poche parole svolge la funzione di demone e poi fa quello che abbiamo 
        gi&agrave; visto fare al client. Apriamo un nuovo form e aggiungiamogli 
        il controllo Winsock<img src="../images/controls/winsock.gif" width="25" height="25" align="absmiddle">che 
        chiameremo <b>wskServer</b>. Vediamo allora questi due metodi nuovi.</p>
      <hr>
      <p align="center" class="size3">LISTEN</p>
      <p>Per mettere il server in ascolto il metodo sar&agrave; - ci si sente 
        quasi scemi a programmare in questo modo - <b>Listen</b>.</p>
      <p>Quindi <b>wskServer.Listen</b> mette in ascolto il server.<br>
        Non manca nulla? Non gli abbiamo detto su che porta. Per specificarla 
        utilizzeremo la propriet&agrave; <img src="../images/ide/propr.gif" width="16" height="16" align="absmiddle"> 
        <i>LocalPort</i>. Visto che fino alla 1024 sono tutte riservate e non 
        &egrave; buona cosa usarle, scegliamo la porta 2000.<br>
        Associamo la propriet&agrave; <i>LocalPort</i> e il metodo <i>Listen</i> 
        ad un nuovo Button che chiameremo appunto <b>Listen</b>. Avremo quindi 
        una routine del genere:</p>
      <ol class="codicevb" start="14">
        <li>Private Sub Listen_Click()</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskServer.LocalPort = 2000</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskServer.Listen</li>
        <li>End Sub</li>
      </ol>
      <p>Se apriamo un Prompt del DOS<img src="../images/icons/somsdos.gif" width="26" height="31" align="absmiddle">e 
        scriviamo &quot;<a href="clser_00.htm#STEP4">NETSTAT</a> -na&quot; vediamo 
        che il <a href="clser_00.htm#STEP2">localhost</a> (oppure l'host 127.0.0.1 
        o anche 0.0.0.0) ha la porta 2000 aperta in stato Listening.</p>
      <hr>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo testo */
google_ad_slot = "6726967947";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p align="center" class="size3">CONNECTION REQUEST</p>
      <p>Ora dovremmo gestire la richiesta di connessione che presto faremo fare 
        al nostro novello Client.</p>
      <p>Per questo usiamo l'evento <i>ConnectionRequest</i> e gli associamo il 
        metodo <i>Accept</i> che richiede come parametro il requestID che compare 
        nella dichiarazione dell'evento.<br>
        Avremo quindi una routine del genere:</p>
      <ol class="codicevb" start="18">
        <li>Private Sub wskServer_ConnectionRequest(ByVal requestID As Long)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If (wskServer.State &lt;&gt; sckClosed) Then 
          wskServer.Close</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskServer.LocalPort = 0</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;wskServer.Accept requestID</li>
        <li>End Sub</li>
      </ol>
      <p>Ho aggiunto un IF nel quale compaiono la propriet&agrave; <i>State</i> 
        ed il metodo <i>Close</i>.<br>
        La ragione &egrave; semplice. Se la connessione fosse gi&agrave; attivata 
        otterremmo un errore. In tal modo siamo sicuri di non richiedere una cosa 
        che gi&agrave; &egrave; avvenuta (vedi le informazioni sullo <a href="clser_00.htm#STEP4">stato 
        TIME_WAIT</a>).</p>
      <p>Per avere anche la possibilit&agrave; di rifiutare una connessione potremmo 
        usare la propriet&agrave; <i>RemoteHostIP</i> per sapere se il client 
        che sta richiedendo una connessione ci piace o meno.</p>
      <p>Gli eventi <i>DataArrival</i> e i metodi <i>SendData</i> e <i>GetData</i> 
        sappiamo gi&agrave; come vanno introdotti.</p>
      <p>Abbiamo ottenuto quindi anche un abbozzo di server, anche se &egrave; 
        un po' pretenzioso chiamarlo cos&igrave;. ;) Possiamo vedere i nostri 
        due mostriciattoli in azione dicendo al client di collegarsi all'host 
        127.0.0.1 su una porta di vostra scelta (avevamo deciso la 2000).</p>
      <p>Richiedere una connessione al server dopo che questo &egrave; stato messo 
        in ascolto (sulla stessa porta ovviamente) e cominciare a scambiare stringhe 
        di testo tra uno e l'altro. Sarebbe comodo qualche abbellimento come una 
        TextBox nel quale si possono specificare host e porta e magari una label 
        che ci dice che &egrave; stata richiesta una connessione o ancora meglio 
        che ci dice in che stato &egrave; il controllo. Questo &egrave; gestibile 
        con la propriet&agrave; State che abbiamo visto prima.</p>
      <p>Sulla documentazione dell'MSDN si trovano tutti i valori che la propriet&agrave; 
        <i>State</i> pu&ograve; assumere e gli stati al quale corrispondono. Quelli 
        fondamentali sono:</p>
      <ul>
        <li>0 = SocketClosed</li>
        <li>1 = Open</li>
        <li>2 = Listening</li>
        <li>7 = Connected</li>
        <li>9 = Error</li>
      </ul>
      <!-- #EndEditable --></td>
  </tr>
</table>

<table width="100%">
  <tr> 
    <td><!-- #BeginEditable "FINALE" --> 
      <p>Adesso libero sfogo alla fantasia! Possimao costruirci un client di posta, 
        una messenger simile ad Icq, un client per le news e tutto quello che 
        vi viene in mente di malizioso.<br>
        Se ad esempio mettessimo il form del server invisibile e mettessimo il 
        winsock in Listen sul Form_Load, magari scrivendo nel registro di partire 
        in automatico all'avvio di Windows, cosa avremmo ottenuto...? <img 
        src="../images/smiley/wink.gif" width="15" height="15" border="0" align="absmiddle"></p>
      <p>Buon divertimento.</p>
      <!-- #EndEditable -->
      <p align="right" class="credits2"><!-- #BeginEditable "CREDITS" --><a href="../vbmail.htm?id=14">Alberto 
        Alagna</a><br>
        12 Marzo 2001<!-- #EndEditable --></p>
      <!-- #BeginLibraryItem "/Library/Toolbar2.lbi" -->
     <table width="80%" border="1" cellspacing="1" cellpadding="3" align="center" bordercolor="#000000" class="dontprint">
       <tr> 
          <td align="center" valign="top" width="33%"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
            <span class="size1">Scarica il progetto</span></td>
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
            <span class="size1">Scarica il testo dell'articolo</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
            <span class="size1">Stampa l'articolo</span></a></td>
        </tr>
      </table><!-- #EndLibraryItem -->
    </td>
  </tr>
</table>
<table width="100%" border="0" cellspacing="2" cellpadding="2">
  <tr>
    <td align="left"><a href="index.htm"><img src="../images/vbprev.jpg" width="49" height="32" align="absmiddle" border="0"> 
      Torna all'indice Client/Server</a></td>
    <td align="right">&nbsp;</td>
  </tr>
</table>

<hr width="80%">
<table width="100%">
  <tr>
    <td width="100%" align="center">
      <script language="Javascript">Banner();</script>
      <!--#echo banner=""-->
    </td>
  </tr>
</table>
<script language="Javascript">FibiaWebStats();</script>
</body>
<!-- #EndTemplate --></html>
