<html><!-- #BeginTemplate "/Templates/Articoli.dwt" -->
<head>
<script language="JavaScript" src="../funzioni.js"></script>
<script language="JavaScript" src="../scroller.js"></script>
<!-- #BeginEditable "doctitle" --> 
<title>Le operazioni di Bit Shift</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../stili.css" rel="stylesheet" type="text/css" title="stili">
<link href="../codicevb.css" rel="stylesheet" type="text/css" title="codicevb">
<link href="../colori.css" rel="stylesheet" type="text/css" title="colori">
<meta name="description" content="Visual Basic Simple &egrave; l'unico sito in Italia che tratta la programmazione in Visual Basic in un'ottica mai vista prima d'ora. Tutti gli articoli sono spiegati passo dopo passo ed in una maniera davvero semplice per consentire a tutti di comprendere gli argomenti trattati.">
<meta name="keywords" content="VB, Visual, Basic, Simple, programmazione, codici, esempi, manuali, studio, sviluppo, ActiveX, OCX, articoli, notizie, apprendere, QBasic, API, COM, database">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td width="400" align="left" bgcolor="#FFFFFF"><img src="../images/vbslogo.jpg" width="400" height="80" border="0" alt="Visual Basic Simple"></td>
    <td width="100%" align="right" bgcolor="#FFFFFF"> 
      <div class="intestazioni"><a href="../home.htm">Home Page</a> <a href="../home.htm"><img src="../images/icons/dothome.gif" align="absmiddle" border="0" alt="Home Page" width="25" height="25"></a><br>
        <a href="../history.htm">Novit&agrave;</a> <a href="../history.htm"><img src="../images/icons/dotinfo.gif" align="absmiddle" border="0" alt="Informazioni su VB Simple" width="25" height="25"></a><br>
        <a href="../help.htm">Aiuto</a> <a href="../help.htm"><img src="../images/icons/dothelp.gif" align="absmiddle" border="0" alt="Hai bisogno d'aiuto?" width="25" height="25"></a></div>
    </td>
    <td width="160" align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 160x90, creato 02/02/09 */
google_ad_slot = "8970907891";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></td>
  </tr>
</table>

<div align="center"> 
  <div class="titolo"><!-- #BeginEditable "TITOLO" -->Le operazioni di Bit Shift<!-- #EndEditable --></div>
  <script language="Javascript">NomePagina();</script>
  <table width="80%" border="1" cellspacing="1" cellpadding="3" bordercolorlight="#000000" bordercolordark="#000000" class="dontprint">
    <tr class="size0"> 
      <td align="center" width="25%"><a href="../ftv21/news.htm" target="treeframe"><img src="../images/icons/search%20window.gif" width="16" height="16" border="0" alt="Sincronizza Indice"><br>
        Sincronizza Indice</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
        Scarica il progetto</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
        Testo dell'articolo</a></td>
      <td align="center" width="25%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
        Stampa l'articolo</a></td>
    </tr>
  </table>
  </div>
<table width="100%" border="0">
  <tr> 
    <td width="80%"><script language="JavaScript">ShowArticlesScroller();</script><!-- #BeginEditable "CORPO" -->
      <p>Com'&egrave; noto i personal computer memorizzano e manipolano i dati 
        in <a href="../glossary/b.htm#BIT">bit</a>. Un gruppetto di 8 bit costituisce 
        un <a href="../glossary/b.htm#BYTE">byte</a>. Durante l'elaborazione di 
        certi dati pu&ograve; essere necessario effettuare delle modifiche ai 
        singoli bit di un numero.</p>
      <p>L'operazione di Shift di bit (<i><b>BitShift</b></i>) consiste nello 
        spostare tutti i bit costituenti un valore di un certo numero di posizioni 
        specificato nell'operazione di Shift, che pu&ograve; avvenire in entrambi 
        i sensi. Quando lo spostamento avviene verso sinistra, &egrave; detto 
        <i>ShiftLeft</i> ed &egrave; identificato dall'operatore <b>&lt;&lt;</b> 
        in linguaggio C oppure <b>SHL</b> in linguaggio Assembly; quando, viceversa, 
        lo spostamento avviene verso destra l'operazione &egrave; detta <i>ShiftRight</i> 
        ed &egrave; identificata dall'operatore <b>&gt;&gt;</b> in linguaggio 
        C oppure <b>SHR</b> in linguaggio Assembly.</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo grafica */
google_ad_slot = "0981518759";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Prima di vedere con calma di cosa si tratti si raccomanda l'utilizzo 
        dell'utility <b>BitViewer</b>, liberamente scaricabile dall'<a href="../risorse/vbup2/index.htm">angolo 
        VBUP2</a>.</p>
      <p>L'operazione in se stessa effettua una una moltiplicazione (<i>ShiftLeft</i>) 
        oppure una divisione (<i>ShiftRight</i>) di multipli di 2; questo perch&eacute; 
        il valore assegnato ad un bit dipende dalla sua posizione. Vedi anche 
        le <a href="../info/info_03.htm">informazioni aggiuntive sui sistemi di 
        numerazione</a>.</p>
      <p>Supponiamo che il valore del nostro numero sia -987654321, un numero 
        negativo. Utilizzando BitViewer scopriamo che la sua rappresentazione 
        binaria &egrave;:</p>
      <p align="center" class="fixed">1100 0101 0010 0001 1001 0111 0100 1111</p>
      <p>La cifra pi&ugrave; a sinistra &egrave; l'ultimo (32&deg;) bit mentre 
        quella all'estrema destra &egrave; il primo bit. La numerazione avviene 
        pertanto dal bit in posizione 0 al bit in posizione 31.</p>
      <hr>
      <p>L'operazione di shift a sinistra consiste nello spostare verso sinistra 
        i vari bit del numero di posizioni specificato. Nel nostro esempio il 
        risultato di uno shift a sinistra di 1 bit &egrave;:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 &lt;&lt; 1<br>
              1000 1010 0100 0011 0010 1110 1001 111<b class="colorerosso">0</b></td>
          </tr>
        </table>
      </div>
      <p>Tutti i bit del numero sono stati spostati verso sinistra di una posizione. 
        Il bit all'estrema destra viene impostato a 0. Visual Basic nativamente 
        non provvede alcuna soluzione per effettuare shift di bit a sinistra; 
        la soluzione pi&ugrave; semplice sembrerebbe quella di effettuare una 
        moltiplicazione del numero per 2 se il numero di bit da spostare &egrave; 
        1, per 4 se il numero di bit da spostare &egrave; 2, etc... </p>
      <p>Torniamo al nostro numero -987654321, una moltiplicazione per due (corrispondente 
        ad uno shift a sinistra di 1 bit) restituisce il valore -1975308642, rappresentabile 
        in binario con:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 * 2<br>
              1000 1010 0100 0011 0010 1110 1001 111<b class="colorerosso">0</b> 
              (-1975308642)</td>
          </tr>
        </table>
      </div>
      <p>Utilizzando la moltiplicazione per 2 in questo semplice caso il risultato 
        ottenuto &egrave; quello corretto e senza errori. Ma se il numero di bit 
        da spostare &egrave; ad esempio 2 o 3 viene generato un errore di <i>overflow</i> 
        durante la computazione della moltiplicazione.</p>
      <p>&Egrave; pertanto necessario trovare un'altra soluzione, differente dalla 
        semplice moltiplicazione per 2. Una soluzione, proposta da <a
        href="../vbmail.htm?id=11"><b><i>Dave Foley</i></b></a>, consiste nell'azzerare 
        quei bit che genererebbero l'errore di overflow <b>prima</b> di effettuare 
        la moltiplicazione e riattivare l'eventuale bit di segno solo in seguito. 
        Vediamo subito l'esempio pratico:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">-987654321 &lt;&lt; 5 = <br>
              -987564321 * 32 (2^5) = Errore di Overflow</td>
          </tr>
        </table>
      </div>
      <p>Tramite il codice di Foley invece:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 AND<br>
              <span class="sottolineato"><b class="colorerosso">0000 00</b>11 
              1111 1111 1111 1111 1111 1111</span> (2^(31-5)-1) = <br>
              <b class="colorerosso">0000 00</b>01 0010 0001 1001 0111 0100 1111 
              (18978639)</td>
          </tr>
        </table>
      </div>
      <p>Sar&agrave; adesso necessario rintracciare l'eventuale bit di segno da 
        reimpostare dopo che sar&agrave; effettuata la moltiplicazione. L'isolamento 
        del bit di segno &egrave; fatto come segue:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 AND<br>
              <span class="sottolineato">0000 0<b class="colorerosso">1</b>00 
              0000 0000 0000 0000 0000 0000</span> (2^(31-5)) = <br>
              0000 0<b class="colorerosso">1</b>00 0000 0000 0000 0000 0000 0000</td>
          </tr>
        </table>
      </div>
      <p>Il bit acceso in tale posizione indica il nuovo bit di segno dopo l'operazione 
        di Shift. Se il risultato di tale operazione &egrave; diverso da 0, sar&agrave; 
        salvato il bit di segno in una variabile ed esso verr&agrave; aggiunto 
        solo in seguito all'operazione di Shift, effettuata mediante la normale 
        moltiplicazione del valore calcolato in precedenza.</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed"><b class="colorerosso">0000 
              00</b>01 0010 0001 1001 0111 0100 1111 * 32 (2^5)<br>
              <b class="colorerosso">0</b>010 0100 0011 0010 1110 1001 111<b class="colorerosso">0 
              0000</b> OR<br>
              <span class="sottolineato"><b class="colorerosso">1</b>000 0000 
              0000 0000 0000 0000 0000 0000</span> (Segno)<br>
              1010 0100 0011 0010 1110 1001 1110 0000 (-1540167200)</td>
          </tr>
        </table>
      </div>
      <p>L'operazione ha avuto effetto! Il numero originale -987564321 &egrave; 
        stato spostato a sinistra di 5 bit ottenendo il numero -1540167200.</p>
      <hr>
      <p>L'operazione di shift a destra consiste nello spostare verso destra i 
        vari bit del numero di posizioni specificato. Nel nostro esempio il risultato 
        di uno shift a destra di 1 bit &egrave;:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 &gt;&gt; 1<br>
              <b class="colorerosso">0</b>110 0010 1001 0000 1100 1011 1010 0111</td>
          </tr>
        </table>
      </div>
      <p>Tutti i bit del numero sono stati spostati verso destra di una posizione. 
        Il bit all'estrema sinistra viene impostato a 0. Visual Basic nativamente 
        non provvede alcuna soluzione per effettuare shift di bit a sinistra o 
        a destra. La soluzione pi&ugrave; semplice in caso di un ShiftRight consiste 
        nell'effettuare una divisione intera del numero per 2 se il numero di 
        bit da spostare &egrave; 1, per 4 se il numero di bit da spostare &egrave; 
        2, etc... </p>
    <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* Contenuti 468x60 */
google_ad_slot = "0785185013";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Torniamo al nostro numero -987654321, una divisione intera per due (corrispondente 
        ad uno shift a destra di 1 bit) restituisce il valore -493827160 con il 
        resto di 1, rappresentabile in binario con:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 \ 2<br>
              <b class="colorerosso">1</b>110 0010 1001 0000 1100 1011 1010 <b class="colorerosso">1000</b> 
              (-493827160)</td>
          </tr>
        </table>
      </div>
      <p>Notiamo subito che l'ultimo gruppetto di cifre a destra (ma potevano 
        essere anche pi&ugrave; di quattro cifre binarie) &egrave; differente 
        dal risultato corretto visto in precedenza. In particolare esso &egrave; 
        incrementato di un'unit&agrave; (0111 + 1 = 1000). Per correggere questo 
        comportamento della divisione intera &egrave; necessario impostare subito 
        i bit che verranno scartati (quelli all'estrema destra) a 0. L'operazione 
        potr&agrave; essere eseguita mediante un calcolo tramite l'operatore <b>AND</b>. 
        Il numero risultante sar&agrave; pertanto:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 AND<br>
              <span class="sottolineato">1111 1111 1111 1111 1111 1111 1111 111<b class="colorerosso">0</b></span> 
              =<br>
              1100 0101 0010 0001 1001 0111 0110 111<b class="colorerosso">0</b> 
              (-987654322)</td>
          </tr>
        </table>
      </div>
      <p>Solo adesso sar&agrave; possibile effettuare la divisione intera vista 
        in precedenza...</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0110 1110 \ 2<br>
              <b class="colorerosso">1</b>110 0010 1001 0000 1100 1011 1010 0111 
              (-493827161)</td>
          </tr>
        </table>
      </div>
      <p>Resta soltanto da mettere a punto il bit all'estrema sinistra impostandolo 
        su 0 mediante la solita operazione di <b>AND</b>.</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1110 0010 1001 0000 1100 1011 
              1010 0111 AND<br>
              <span class="sottolineato"><b class="colorerosso">0</b>111 1111 
              1111 1111 1111 1111 1111 1111</span> =<br>
              <b class="colorerosso">0</b>110 0010 1001 0000 1100 1011 1011 0111 
              (+1653656487)</td>
          </tr>
        </table>
      </div>
      <p>Queste tre operazioni effettuano l'operazione elementare di Shift a destra 
        di 1 bit soltanto. Se dovessimo spostare pi&ugrave; bit dovremmo ripetere 
        lo stesso procedimento svariate volte oppure modificare i valori delle 
        operazioni:</p>
      <div align="center"> 
        <table width="75%">
          <tr> 
            <td align="left" nowrap class="fixed">1100 0101 0010 0001 1001 0111 
              0100 1111 AND<br>
              <span class="sottolineato">1111 1111 1111 1111 1111 1111 1111 <b class="colorerosso">0000</b></span> 
              =<br>
              1100 0101 0010 0001 1001 0111 0100 <b class="colorerosso">0000</b> 
              (-987654336)<br>
              <br>
              1100 0101 0010 0001 1001 0111 0100 0000 \ 16 (2^4)<br>
              1111 1100 0101 0010 0001 1001 0111 0100 (-61728396)<br>
              <br>
              1111 1100 0101 0010 0001 1001 0111 0100 AND<br>
              <span class="sottolineato"><b class="colorerosso">0000</b> 1111 
              1111 1111 1111 1111 1111 1111</span> = <br>
              <b class="colorerosso">0000</b> 1100 0101 0010 0001 1001 0111 0100 
              (206707060)</td>
          </tr>
        </table>
      </div>
      <p>In questo caso abbiamo effettuato uno Shift a destra di 4 bit del numero 
        -987654321.</p>
      <hr>
      <p>Una soluzione alternativa proposta da VB Simple consiste nell'utilizzo 
        di una <a href="../glossary/d.htm#DLL">DLL</a> non <a href="../glossary/a.htm#ACTIVEX">ActiveX</a> 
        creata mediante Assembly. In un'altra sezione di questo sito verr&agrave; 
        spiegato come creare una DLL in linguaggio Assembly compilando tramite 
        <b>NASM</b> (disponibile presso l'<a href="../risorse/vbup2/index.htm">angolo 
        VBUP2</a>) e come utilizzare del codice in linguaggio macchina precompilato 
        sempre con Assembly per eseguire operazioni difficoltose o troppo lente 
        per essere eseguite con Visual Basic puro.</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo testo */
google_ad_slot = "6726967947";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Non ci soffermeremo sulla produzione e compilazione della DLL in questione. 
        Il codice sorgente e quello precompilato possono essere scaricati dalla 
        sezione <a href="../risorse/index.htm">Downloads</a>.</p>
      <p>La nostra DLL per effettuare lo Shift dei bit di un numero si chiamer&agrave; 
        BitShift.DLL e conterr&agrave; due semplici funzioni: <i>FBIShiftLeft</i> 
        ed <i>FBIShiftRight</i> definite come segue:</p>
      <ol class="codicevb" start="1">
        <li>Private Declare Function SHL Lib &quot;BitShift.dll&quot; Alias &quot;FBIShiftLeft&quot; 
          (ByVal Numero As Long, ByVal Bits As Long, ByVal Reserved1 As Long, 
          ByVal Reserved2 As Long) As Long<br>
          <br>
        </li>
        <li>Private Declare Function SHR Lib &quot;BitShift.dll&quot; Alias &quot;FBIShiftRight&quot; 
          (ByVal Numero As Long, ByVal Bits As Long, ByVal Reserved1 As Long, 
          ByVal Reserved2 As Long) As Long</li>
      </ol>
      <p>Entrambe richiedono il passaggio di due parametri fondamentali: Numero 
        e Bits, pi&ugrave; due parametri inutilizzati ma aggiunti soltanto per 
        compatibilit&agrave; con certe funzioni <a href="../glossary/a.htm#API">API</a>. 
        Le funzioni richiedono e restituiscono dati di <a href="../info/info_04.htm">tipo 
        Long</a> ovvero numeri interi a 32 bit.</p>
      <p>Nel progetto in questione sono proposte, oltre alle funzioni sviluppate 
        in Assembly, anche le stesse due funzioni scritte in Visual Basic puro 
        il cui utilizzo &egrave; sconsigliato per l'estrema lentezza intrinseca 
        al linguaggio stesso.</p>
      <!-- #EndEditable --></td>
  </tr>
</table>

<table width="100%">
  <tr> 
    <td><!-- #BeginEditable "FINALE" --> 
      <p>Si ringrazia in particolare <a href="../vbmail.htm?id=11"><i><b>Dave 
        Foley</b> (davef@speakeasy.org)</i></a>, autore della funzione originale 
        <i>ShiftLeft</i> qui leggermente modificata ed adattata.</p>
      <!-- #EndEditable -->
      <!-- #BeginEditable "CREDITS" --> 
      <p align="right" class="credits2"><a href="../vbmail.htm?id=1">Fibia FBI</a><br>
        26 Gennaio 2002</p>
      <!-- #EndEditable --><!-- #BeginLibraryItem "/Library/Toolbar.lbi" -->
      <table width="80%" border="1" cellspacing="1" cellpadding="3" align="center" bordercolor="#000000" class="dontprint">
        <tr> 
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
            <span class="size1">Scarica il progetto</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
            <span class="size1">Scarica il testo dell'articolo</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
            <span class="size1">Stampa l'articolo</span></a></td>
        </tr>
      </table><!-- #EndLibraryItem -->
    </td>
  </tr>
</table>
<table width="100%" border="0" cellspacing="2" cellpadding="2">
  <tr>
    <td align="left"><a href="index.htm"><img src="../images/vbprev.jpg" width="49" height="32" align="absmiddle" border="0"> 
      Torna all'indice degli articoli</a></td>
    <td align="right">&nbsp;</td>
  </tr>
</table>

<hr width="80%">
<table width="100%">
  <tr>
    <td width="100%" align="center">
      <script language="Javascript">Banner();</script>
      <!--#echo banner=""-->
    </td>
  </tr>
</table>
<script language="Javascript">FibiaWebStats();</script>
</body>
<!-- #EndTemplate --></html>
