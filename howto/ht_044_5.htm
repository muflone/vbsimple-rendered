<html><!-- #BeginTemplate "/Templates/HowTo.dwt" -->
<head>
<script language="JavaScript" src="../funzioni.js"></script>
<script language="JavaScript" src="../scroller.js"></script>
<!-- #BeginEditable "doctitle" --> 
<title>Utilizzare il registro di Windows (quinta parte)</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../stili.css" rel="stylesheet" type="text/css" title="stili">
<link href="../codicevb.css" rel="stylesheet" type="text/css" title="codicevb">
<link href="../colori.css" rel="stylesheet" type="text/css" title="colori">
<meta name="description" content="Visual Basic Simple &egrave; l'unico sito in Italia che tratta la programmazione in Visual Basic in un'ottica mai vista prima d'ora. Tutti gli articoli sono spiegati passo dopo passo ed in una maniera davvero semplice per consentire a tutti di comprendere gli argomenti trattati.">
<meta name="keywords" content="VB, Visual, Basic, Simple, programmazione, codici, esempi, manuali, studio, sviluppo, ActiveX, OCX, articoli, notizie, apprendere, QBasic, API, COM, database">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td width="400" align="left" bgcolor="#FFFFFF"><img src="../images/vbslogo.jpg" width="400" height="80" border="0" alt="Visual Basic Simple"></td>
    <td width="100%" align="right" bgcolor="#FFFFFF"> 
      <div class="intestazioni"><a href="../home.htm">Home Page</a> <a href="../home.htm"><img src="../images/icons/dothome.gif" align="absmiddle" border="0" alt="Home Page" width="25" height="25"></a><br>
        <a href="../history.htm">Novit&agrave;</a> <a href="../history.htm"><img src="../images/icons/dotinfo.gif" align="absmiddle" border="0" alt="Informazioni su VB Simple" width="25" height="25"></a><br>
        <a href="../help.htm">Aiuto</a> <a href="../help.htm"><img src="../images/icons/dothelp.gif" align="absmiddle" border="0" alt="Hai bisogno d'aiuto?" width="25" height="25"></a></div>
    </td>
    <td width="160" align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 160x90, creato 02/02/09 */
google_ad_slot = "8970907891";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></td>
  </tr>
</table>

<div align="center"> 
  <div class="titolo"><!-- #BeginEditable "TITOLO" -->Utilizzare il registro di 
    Windows<br>
    (quinta parte)<!-- #EndEditable --> 
    <!-- #BeginEditable "API" --><img src="../images/api.gif" width="34" height="24" align="absmiddle"><!-- #EndEditable --></div>
  <script language="Javascript">NomePagina();</script>
  <table width="80%" border="1" cellspacing="1" cellpadding="3" bordercolorlight="#000000" bordercolordark="#000000" class="dontprint">
    <tr class="size0"> 
      <td align="center" width="25%"><a href="../ftv21/howto.htm" target="treeframe"><img src="../images/icons/search%20window.gif" width="16" height="16" border="0" alt="Sincronizza Indice"><br>
        Sincronizza Indice</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
        Scarica il progetto</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
        Testo dell'articolo</a></td>
      <td align="center" width="25%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
        Stampa l'articolo</a></td>
    </tr>
  </table>
</div>
<table width="100%" border="0">
  <tr> 
    <td width="80%"> 
      <table width="100%"><tr><td align="left" nowrap><style type="text/css">
@import url(http://www.google.com/cse/api/branding.css);
</style>
<div class="cse-branding-right" style="background-color:#FFFFFF;color:#000000">
  <div class="cse-branding-form">
    <form action="http://www.google.it/cse" id="cse-search-box">
      <div>
        <input type="hidden" name="cx" value="partner-pub-8218922773694577:rv2o52-qh5a" />
        <input type="hidden" name="ie" value="ISO-8859-1" />
        <input type="text" name="q" size="20" />
        <input type="submit" name="sa" value="Cerca" />
      </div>
    </form>
  </div>
  <div class="cse-branding-logo">
    <img src="http://www.google.com/images/poweredby_transparent/poweredby_FFFFFF.gif" alt="Google" />
  </div>
  <div class="cse-branding-text">
    Ricerca personalizzata
  </div>
</div></td><td align="right">
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><!-- #BeginEditable "DIFFICOLTA" --><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level3.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level4.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level5.gif" width="17" height="18" align="absmiddle"> 
        5<!-- #EndEditable --> / 5</p>
</td></tr></table>
      <script language="JavaScript">ShowArticlesScroller();</script><!-- #BeginEditable "CORPO" -->
<p align="center"><a href="ht_044_4.htm">&lt;&lt; Continua dalla parte 4</a></p>
      <p>Concludiamo questo lungo articolo con le ultime due funzioni della classe: 
        <b>SeparaValore</b> e <b>Importa</b>: la prima servir&agrave; per estrarre 
        da un file di testo il corretto nome e contenuto di un valore; la seconda 
        si occuper&agrave; di leggere i dati da un file di testo compatibile con 
        Regedit ed inserirli nel registro nella corretta posizione.</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo grafica */
google_ad_slot = "0981518759";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <ol class="codicevb" start="444">
        <li>Private Function SeparaValore(ByVal Dati As String, ByRef NomeValore 
          As String) As String</li>
        <li>&nbsp;&nbsp;Dim Conta As Integer</li>
        <li>&nbsp;&nbsp;Conta = InStr(2, Dati, &quot;&quot;&quot;&quot;)</li>
        <li>&nbsp;&nbsp;Do While Conta &gt; 0</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If Mid$(Dati, Conta - 1, 2) &lt;&gt; &quot;\&quot;&quot;&quot; 
          Then Exit Do</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Conta = InStr(Conta + 1, Dati, &quot;&quot;&quot;&quot;)</li>
        <li>&nbsp;&nbsp;Loop</li>
        <li>&nbsp;&nbsp;If Left$(Dati, 1) = &quot;@&quot; Then Conta = 1</li>
        <li>&nbsp;&nbsp;NomeValore = Left$(Dati, Conta)</li>
        <li>&nbsp;&nbsp;NomeValore = Replace(NomeValore, &quot;\\&quot;, &quot;\&quot;)</li>
        <li>&nbsp;&nbsp;NomeValore = Replace(NomeValore, &quot;\r&quot;, vbCr)</li>
        <li>&nbsp;&nbsp;NomeValore = Replace(NomeValore, &quot;\n&quot;, vbLf)</li>
        <li>&nbsp;&nbsp;NomeValore = Replace(NomeValore, &quot;\&quot;&quot;&quot;, 
          &quot;&quot;&quot;&quot;)</li>
        <li>&nbsp;&nbsp;SeparaValore = Mid$(Dati, Conta + 2)</li>
        <li>&nbsp;&nbsp;SeparaValore = Replace(SeparaValore, &quot;\\&quot;, &quot;\&quot;)</li>
        <li>&nbsp;&nbsp;SeparaValore = Replace(SeparaValore, &quot;\r&quot;, vbCr)</li>
        <li>&nbsp;&nbsp;SeparaValore = Replace(SeparaValore, &quot;\n&quot;, vbLf)</li>
        <li>&nbsp;&nbsp;SeparaValore = Replace(SeparaValore, &quot;\&quot;&quot;&quot;, 
          &quot;&quot;&quot;&quot;)</li>
        <li>End Function</li>
        <li></li>
      </ol>
      <p>Semplice quanto banale, la funzione <b>SeparaValore</b> ricostruisce 
        il corretto nome e contenuto di un valore dal formato proveniente da file 
        (ovvero alterato dalla procedura di esportazione o dal programma Regedit). 
        La ricostruzione terr&agrave; conto che all'interno del nome di un valore 
        possono esserci anche quei simboli particolari quali le virgolette o il 
        segno di uguaglianza e pertanto la separazione tra nome e contenuto del 
        valore deve tenerne conto prima (righe 446-450), ed eliminare quelle alterazioni 
        (righe 451-461).</p>
      <ol class="codicevb" start="464">
        <li>Public Function Importa(ByVal NomeFile As String) As Boolean</li>
        <li>&nbsp;&nbsp;Dim FileNR As Integer</li>
        <li>&nbsp;&nbsp;Dim LineBuffer As String</li>
        <li>&nbsp;&nbsp;Dim Buffer As Variant</li>
        <li>&nbsp;&nbsp;Dim oldKey As Long</li>
        <li>&nbsp;&nbsp;Dim newKey As Long</li>
        <li>&nbsp;&nbsp;Dim Conta As Integer</li>
        <li>&nbsp;&nbsp;Dim Buffer2() As Byte</li>
        <li>&nbsp;&nbsp;Dim TipoDati As TipoValoriRegistro</li>
        <li>&nbsp;&nbsp;FileNR = FreeFile</li>
        <li>&nbsp;&nbsp;On Error Resume Next</li>
        <li>&nbsp;&nbsp;Open NomeFile For Input As FileNR</li>
        <li>&nbsp;&nbsp;If Err.Number &lt;&gt; 0 Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;MsgBox &quot;Errore durante la preparazione 
          all'importazione!&quot;, vbCritical + vbOKOnly, &quot;FBIRegistry&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Importa = False</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Close FileNR</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Exit Function</li>
        <li>&nbsp;&nbsp;End If</li>
        <li>&nbsp;&nbsp;Line Input #FileNR, LineBuffer</li>
        <li>&nbsp;&nbsp;If UCase$(LineBuffer) &lt;&gt; &quot;REGEDIT4&quot; Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;MsgBox &quot;Il formato del file da importare 
          non &egrave; corretto!&quot;, vbCritical + vbOKOnly, &quot;FBIRegistry&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Importa = False</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Exit Function</li>
        <li>&nbsp;&nbsp;End If</li>
      </ol>
      <p>Prima di iniziare l'elaborazione vera e propria saranno effettuati quei 
        controlli d'obbligo quale l'accessibilit&agrave; al file ed il controllo 
        della sua intestazione (<i><b>REGEDIT4</b></i>). Nella mancanza di uno 
        di questi due requisiti l'elaborazione verr&agrave; interrotta con un 
        messaggio di errore (righe 476-487).</p>
      <ol class="codicevb" start="488">
        <li>&nbsp;&nbsp;oldKey = lngKeyValue</li>
        <li>&nbsp;&nbsp;lngKeyValue = 0</li>
        <li>&nbsp;&nbsp;Do While Not EOF(FileNR)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Line Input #FileNR, LineBuffer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;LineBuffer = Trim$(LineBuffer)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Buffer = &quot;&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Do While Right$(LineBuffer, 1) = &quot;\&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer = Buffer &amp; Left$(LineBuffer, 
          Len(LineBuffer) - 1)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Line Input #FileNR, LineBuffer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LineBuffer = Trim$(LineBuffer)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Loop</li>
      </ol>
      <p>Verr&agrave; quindi letto il contenuto del file linea per linea (riga 
        491). Se i dati letti dal file termineranno sulla destra con un <code>&quot;\&quot;</code> 
        sar&agrave; segno di un dato binario spezzato su pi&ugrave; righe e pertanto 
        sar&agrave; necessario ricostruire l'intero valore (righe 494-498) leggendo 
        una per una le righe successive.</p>
    <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* Contenuti 468x60 */
google_ad_slot = "0785185013";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <ol class="codicevb" start="499">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If LineBuffer &lt;&gt; &quot;&quot; Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer = Buffer &amp; LineBuffer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Left$(Buffer, 1) = &quot;[&quot; 
          Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer = Mid$(Buffer, 
          2, Len(Buffer) - 2)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Conta = InStr(1, Buffer, 
          &quot;\&quot;)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LineBuffer = Buffer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Conta &gt; 0 Then 
          LineBuffer = UCase$(Left$(Buffer, Conta - 1))</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Select Case LineBuffer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_CLASSES_ROOT&quot;: 
          newKey = HKEY_CLASSES_ROOT</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_CURRENT_CONFIG&quot;: 
          newKey = HKEY_CURRENT_CONFIG</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_CURRENT_USER&quot;: 
          newKey = HKEY_CURRENT_USER</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_DYN_DATA&quot;: 
          newKey = HKEY_DYN_DATA</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_LOCAL_MACHINE&quot;: 
          newKey = HKEY_LOCAL_MACHINE</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_PERF_ROOT&quot;: 
          newKey = HKEY_PERF_ROOT</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_PERFORMANCE_DATA&quot;: 
          newKey = HKEY_PERFORMANCE_DATA</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case &quot;HKEY_USERS&quot;: 
          newKey = HKEY_USERS</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case Else</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox 
          &quot;La chiave principale non &egrave; una chiave di sistema.&quot;, 
          vbCritical + vbOKOnly, &quot;FBIRegistry&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Importa 
          = False</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close 
          FileNR</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit 
          Function</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End Select</li>
      </ol><p>Ottenuta quindi una riga completa di dati dal file sar&agrave; necessario 
        innanzitutto verificare se si tratti di una chiave oppure di un valore. 
        Le chiavi sono identificate da una coppia di parentesi quadre agli estremi 
        nella forma <code>&quot;[chiave]&quot;</code>. Pertanto i dati che iniziano 
        per <code>&quot;[&quot;</code> identificano una chiave e come tale deve 
        essere trattata.</p>
      <p>Verranno quindi estratte la chiave di sistema e la sottochiave rispetto 
        a questa e salvata nella variabile <b>newKey</b> (righe 502-520).</p>
      <ol class="codicevb" start="521">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Call RegCloseKey(lngKeyValue)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lngKeyValue = 0</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Call RegCreateKeyEx(newKey, 
          Mid$(Buffer, Len(LineBuffer) + 2), ByVal 0&amp;, vbNullChar, REG_OPTION_NON_VOLATILE, 
          lngKeySecurity, ByVal 0&amp;, lngKeyValue, ByVal 0&amp;)</li>
      </ol><p>Sar&agrave; adesso necessario aprire o creare la nuova chiave ottenuta. 
        La funzione <i>RegCreateKeyEx</i> crea la chiave se non esiste ma provvede 
        anche la sua apertura nel caso essa esista. Prima di aprire la chiave 
        per&ograve;, verr&agrave; chiusa la chiave eventualmente aperta in precedenza 
        tramite <i>RegCloseKey</i>.</p>
      <ol class="codicevb" start="524">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Else</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Conta = InStr(1, Buffer, 
          &quot;=&quot;)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Conta &gt; 0 Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer 
          = SeparaValore(Buffer, LineBuffer)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If LineBuffer 
          = &quot;@&quot; Then LineBuffer = &quot;&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LineBuffer 
          = DeQuote(LineBuffer)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If Left$(Buffer, 
          1) = &quot;&quot;&quot;&quot; Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TipoDati 
          = REG_SZ</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer 
          = DeQuote(Buffer)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer2 
          = StrConv(Buffer, vbFromUnicode) &amp; vbNullChar</li>
      </ol>
      <p>Se invece il dato estratto dal file non &egrave; una chiave, con grossissima 
        probabilit&agrave; si tratter&agrave; di un valore dell'ultima chiave 
        aperta. Alla riga 527 vengono estratti nome (nella variabile <b>LineBuffer</b>) 
        e contenuto (nella variabile di ritorno <b>Buffer</b>) del valore recuperato 
        da file.<br>
        Saranno in seguito fatti quei minimi aggiustamenti (righe 528-529) per 
        ricostruire il nome valore nella maniera corretta. </p>
      <p>Soltanto adesso potr&agrave; essere fatta l'analisi dei dati recuperati 
        per determinare il tipo di dati trattati. Se il contenuto di tale valore 
        dovesse iniziare con le virgolette ci troveremmo in presenza di un valore 
        di tipo <b>REG_SZ</b> la cui conversione in array di bytes risulta molto 
        semplice (righe 531-533).</p>
      <ol class="codicevb" start="534">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElseIf 
          UCase$(Left$(Buffer, 3)) = &quot;HEX&quot; Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TipoDati 
          = REG_BINARY</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If 
          UCase$(Left$(Buffer, 4)) = &quot;HEX(&quot; Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TipoDati 
          = CByte(Mid$(Buffer, 5, 1))</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End 
          If</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Conta 
          = InStr(1, Buffer, &quot;:&quot;)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer 
          = Mid$(Buffer, Conta + 1)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReDim 
          Buffer2(Ceil(Len(Buffer) / 3)) As Byte</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For 
          Conta = 0 To UBound(Buffer2) - 1</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer2(Conta) 
          = CByte(&quot;&amp;H&quot; &amp; Mid$(Buffer, Conta * 3 + 1, 2))</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Next 
          Conta</li>
      </ol>
      <p>Diversamente se il contenuto di tali dati inizia con la stringa <code>&quot;Hex&quot;</code> 
        ci troveremmo in presenza di dati binari (righe 534-535). Un'eventuale 
        parentesi successiva alla stringa <code>&quot;Hex&quot;</code> indicher&agrave; 
        il tipo di dati binari (righe 536-538).</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo testo */
google_ad_slot = "6726967947";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Sar&agrave; quindi allocato un buffer di bytes in base all'ampiezza dei 
        dati binari recuperati. L'ampiezza &egrave; calcolata come arrotondamento 
        per eccesso (<i>Ceil</i>) della lunghezza del buffer diviso per 3. Il 
        numero tre sta ad indicare 2 bytes per ogni cifra binaria ed un byte per 
        la virgola separatrice. Tali bytes saranno poi riconvertiti in numeri 
        decimali ed inseriti nel buffer binario.</p>
      <ol class="codicevb" start="545">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElseIf 
          UCase$(Left$(Buffer, 5)) = &quot;DWORD&quot; Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TipoDati 
          = REG_DWORD</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer 
          = Mid$(Buffer, 7)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReDim 
          Buffer2(Ceil(Len(Buffer) / 2)) As Byte</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For 
          Conta = 1 To Len(Buffer) Step 2</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Buffer2(Conta 
          \ 2) = CByte(&quot;&amp;H&quot; &amp; Mid$(Buffer, Len(Buffer) - Conta, 
          2))</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Next 
          Conta</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Else</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox 
          &quot;Errore nell'importazione del valore &quot;&quot;&quot; &amp; LineBuffer 
          &amp; &quot;=&quot; &amp; Buffer, vbCritical + vbOKOnly, &quot;FBIRegistry&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Importa 
          = False</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit 
          Function</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If</li>
      </ol>
      <p>Se invece il tipo di dati estratto non &egrave; neanche quello binari 
        si tratter&agrave; necessariamente del tipo di dati <b>DWORD</b> oppure 
        di un caso di errore. Sar&agrave; quindi controllata la presenza della 
        stringa &quot;DWORD&quot; e nel caso positivo verr&agrave; ricostruito 
        il valore <b>DWORD</b> (righe 545-551). </p>
      <p>Come ultimissima ipotesi, se non si tratta n&eacute; di stringhe, n&eacute; 
        di dati binari e n&eacute; tantomeno di valori DWORD abbiamo dinanzi un 
        caso di errore che non pu&ograve; essere gestito. Sar&agrave; generato 
        un avviso e la procedura di importazione verr&agrave; interrotta (righe 
        552-555).</p>
      <ol class="codicevb" start="557">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Call RegSetValueEx(lngKeyValue, 
          LineBuffer, ByVal 0&amp;, TipoDati, Buffer2(0), UBound(Buffer2))</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Else</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox 
          &quot;Il valore presenta una forma anomala.&quot;, vbCritical + vbOKOnly, 
          &quot;FBIRegistry&quot;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Importa 
          = False</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exit Function</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;End If</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;End If</li>
        <li>&nbsp;&nbsp;Loop</li>
        <li>&nbsp;&nbsp;Call RegCloseKey(lngKeyValue)</li>
        <li>&nbsp;&nbsp;Close FileNR</li>
        <li>&nbsp;&nbsp;lngKeyValue = oldKey</li>
        <li>&nbsp;&nbsp;Importa = True</li>
        <li>End Function</li>
      </ol>
      <p>Il raggiungimento della riga 557 dovrebbe indicare nessuna interruzione 
        e quindi un buffer caricato con i dati corretti e nella forma desiderata. 
        La variabile <b>TipoDati</b> dovrebbe invece contenere il tipo di dati 
        desiderato. Saranno quindi salvati tali dati sul registro tramite <i>RegSetValueEx</i>.</p>
      <p>Alla riga 526 abbiamo verificato la presenza di un simbolo &quot;=&quot; 
        ad indicare la separazione tra nome del valore e suo contenuto. Se tale 
        simbolo non dovesse essere affatto presente avremmo dinanzi un altro emblematico 
        caso di errore; sar&agrave; generato un avviso e l'esecuzione verr&agrave; 
        interrotta (righe 559-561).</p>
      <p>Al termine dell'importazione di tutti i valori sar&agrave; chiusa la 
        chiave aperta e si potr&agrave; quindi procedere all'importazione della 
        chiave successiva, fino alla fine del file, segnata anche dalla sua chiusura.<br>
        <br>
      </p>
      <!-- #EndEditable --></td>
  </tr>
</table>

<table width="100%">
  <tr> 
    <td><!-- #BeginEditable "FINALE" --> 
      <p>Questo lunghissimo articolo si conclude qui. Ci sarebbe molto altro da 
        dire ma risulterebbe troppo pesante. La classe sviluppata si presenta 
        parecchio complessa e lunga ma altrettanto semplice e ben fatta.</p>
      <p>Nel progetto da scaricare &egrave; presente anche un semplicissimo esempio 
        a scopo dimostrativo delle principali funzioni della classe clsFBIRegistry, 
        tutta da scoprire. <img src="../images/icons/smile.gif" width="15" height="15" border="0" align="absmiddle"><br>
        La classe &egrave; stata testata su Windows 98 e Windows 2000 utilizzando 
        un file di registro fino a 18 MB e svolge egregiamente il suo compito, 
        tanto da riprodurre gli stessi risultati del programma Regedit (esclusa 
        la velocit&agrave;, ovviamente, limite invalicabile di Visual Basic).</p>
      <!-- #EndEditable -->
      <p align="right" class="credits2"><!-- #BeginEditable "CREDITS" --><a href="../vbmail.htm?id=1">Fibia 
        FBI</a><br>
        1 Aprile 2002<br>
        Corretto il 20 Settembre 2002<br>
        Rivisitato il 24 Maggio 2003<!-- #EndEditable --></p>
      <!-- #BeginLibraryItem "/Library/Toolbar.lbi" -->
      <table width="80%" border="1" cellspacing="1" cellpadding="3" align="center" bordercolor="#000000" class="dontprint">
        <tr> 
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
            <span class="size1">Scarica il progetto</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
            <span class="size1">Scarica il testo dell'articolo</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
            <span class="size1">Stampa l'articolo</span></a></td>
        </tr>
      </table><!-- #EndLibraryItem -->
    </td>
  </tr>
</table>
<table width="100%" border="0" cellspacing="2" cellpadding="2">
  <tr>
    <td align="left"><a href="index.htm"><img src="../images/vbprev.jpg" width="49" height="32" align="absmiddle" border="0"> 
      Torna all'indice degli HowTo</a></td>
    <td align="right">&nbsp;</td>
  </tr>
</table>

<hr width="80%">
<table width="100%">
  <tr>
    <td width="100%" align="center">
      <script language="Javascript">Banner();</script>
      <!--#echo banner=""-->
    </td>
  </tr>
</table>
<script language="Javascript">FibiaWebStats();</script>
</body>
<!-- #EndTemplate --></html>
