<html><!-- #BeginTemplate "/Templates/HowTo.dwt" -->
<head>
<script language="JavaScript" src="../funzioni.js"></script>
<script language="JavaScript" src="../scroller.js"></script>
<!-- #BeginEditable "doctitle" --> 
<title>Verificare se un file esiste</title>
<!-- #EndEditable --> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link href="../stili.css" rel="stylesheet" type="text/css" title="stili">
<link href="../codicevb.css" rel="stylesheet" type="text/css" title="codicevb">
<link href="../colori.css" rel="stylesheet" type="text/css" title="colori">
<meta name="description" content="Visual Basic Simple &egrave; l'unico sito in Italia che tratta la programmazione in Visual Basic in un'ottica mai vista prima d'ora. Tutti gli articoli sono spiegati passo dopo passo ed in una maniera davvero semplice per consentire a tutti di comprendere gli argomenti trattati.">
<meta name="keywords" content="VB, Visual, Basic, Simple, programmazione, codici, esempi, manuali, studio, sviluppo, ActiveX, OCX, articoli, notizie, apprendere, QBasic, API, COM, database">
</head>

<body bgcolor="#FFFFFF" leftmargin="0" topmargin="0">
<table width="100%" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF">
  <tr>
    <td width="400" align="left" bgcolor="#FFFFFF"><img src="../images/vbslogo.jpg" width="400" height="80" border="0" alt="Visual Basic Simple"></td>
    <td width="100%" align="right" bgcolor="#FFFFFF"> 
      <div class="intestazioni"><a href="../home.htm">Home Page</a> <a href="../home.htm"><img src="../images/icons/dothome.gif" align="absmiddle" border="0" alt="Home Page" width="25" height="25"></a><br>
        <a href="../history.htm">Novit&agrave;</a> <a href="../history.htm"><img src="../images/icons/dotinfo.gif" align="absmiddle" border="0" alt="Informazioni su VB Simple" width="25" height="25"></a><br>
        <a href="../help.htm">Aiuto</a> <a href="../help.htm"><img src="../images/icons/dothelp.gif" align="absmiddle" border="0" alt="Hai bisogno d'aiuto?" width="25" height="25"></a></div>
    </td>
    <td width="160" align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 160x90, creato 02/02/09 */
google_ad_slot = "8970907891";
google_ad_width = 160;
google_ad_height = 90;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></td>
  </tr>
</table>

<div align="center"> 
  <div class="titolo"><!-- #BeginEditable "TITOLO" -->Verificare se un file esiste<!-- #EndEditable --> 
    <!-- #BeginEditable "API" --><img src="../images/api.gif" width="34" height="24" align="absmiddle"><!-- #EndEditable --></div>
  <script language="Javascript">NomePagina();</script>
  <table width="80%" border="1" cellspacing="1" cellpadding="3" bordercolorlight="#000000" bordercolordark="#000000" class="dontprint">
    <tr class="size0"> 
      <td align="center" width="25%"><a href="../ftv21/howto.htm" target="treeframe"><img src="../images/icons/search%20window.gif" width="16" height="16" border="0" alt="Sincronizza Indice"><br>
        Sincronizza Indice</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
        Scarica il progetto</a></td>
      <td align="center" width="25%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
        Testo dell'articolo</a></td>
      <td align="center" width="25%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
        Stampa l'articolo</a></td>
    </tr>
  </table>
</div>
<table width="100%" border="0">
  <tr> 
    <td width="80%"> 
      <table width="100%"><tr><td align="left" nowrap><style type="text/css">
@import url(http://www.google.com/cse/api/branding.css);
</style>
<div class="cse-branding-right" style="background-color:#FFFFFF;color:#000000">
  <div class="cse-branding-form">
    <form action="http://www.google.it/cse" id="cse-search-box">
      <div>
        <input type="hidden" name="cx" value="partner-pub-8218922773694577:rv2o52-qh5a" />
        <input type="hidden" name="ie" value="ISO-8859-1" />
        <input type="text" name="q" size="20" />
        <input type="submit" name="sa" value="Cerca" />
      </div>
    </form>
  </div>
  <div class="cse-branding-logo">
    <img src="http://www.google.com/images/poweredby_transparent/poweredby_FFFFFF.gif" alt="Google" />
  </div>
  <div class="cse-branding-text">
    Ricerca personalizzata
  </div>
</div></td><td align="right">
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><!-- #BeginEditable "DIFFICOLTA" --><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"> 
        2<!-- #EndEditable --> / 5</p>
</td></tr></table>
      <script language="JavaScript">ShowArticlesScroller();</script><!-- #BeginEditable "CORPO" --> 
      <ul>
        <li><a href="ht_011.htm#STEP1">Primo sistema (Dir)</a></li>
        <li><a href="ht_011.htm#STEP2">Secondo sistema (Dir con controllo)</a></li>
        <li><a href="ht_011.htm#STEP3">Terzo sistema (GetAttr)</a></li>
        <li><a href="ht_011.htm#STEP4">Quarto sistema (Open)</a></li>
        <li><a href="ht_011.htm#STEP5">Testiamo le quattro funzioni</a></li>
      </ul>
      <p>In molti programmi si presenta la necessit&agrave; di verificare se un 
        dato file esiste. Infatti, in tutti i programmi dove si utilizzano files, 
        il tentativo di leggere dati da un file inesistente genera un errore che, 
        se non correttamente gestito, provoca la chiusura immediata del programma. 
      </p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo grafica */
google_ad_slot = "0981518759";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Vedremo vari esempi per verificare l'esistenza di un file specifico, 
        ognuno con i suoi vantaggi, svantaggi e limiti.</p>
      <hr>
      <p align="center" class="size3"><a name="STEP1"></a>Primo sistema (Dir)</p>
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"> 
        1 / 5</p>
      <p>Probabilmente questo &egrave; il metodo pi&ugrave; utilizzato e pi&ugrave; 
        semplice.<br>
        Consiste nell'utilizzare la funzione <i>Dir</i> che riporta tutti i files 
        che corrispondono ad un certo criterio.</p>
      <ol class="codicevb" start="1">
        <li>Public Function FileEsiste1(ByVal FileDaControllare As String) As 
          Boolean</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim strVerifica As String</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;On Error Resume Next</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileEsiste1 = False</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;strVerifica = Dir$(FileDaControllare)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If (strVerifica &lt;&gt; &quot;&quot;) And 
          (Err.Number = 0) Then FileEsiste1 = True</li>
        <li>End Function</li>
      </ol>
      <p>La prima funzione si chiamer&agrave; <b>FileEsiste1</b> e richiede che 
        sia passato come parametro il nome del file da controllare. All'uscita 
        restituisce un valore booleano: True se il file cercato esiste e False 
        se non esiste.</p>
      <p>All'interno d'essa &egrave; dichiarata una variabile di nome <b>strVerifica</b> 
        che conterr&agrave; il valore restituito dalla funzione Dir. In questo 
        esempio abbiamo usato la corrispondente funzione <i>Dir$</i> che restituisce 
        in uscita un valore di tipo String anzich&eacute; di tipo Variant.<br>
        Alla riga 3 abbiamo inserito un'istruzione per la gestione degli errori. 
        Questo genere di controlli &egrave; obbligatorio, poich&eacute; se l'utente 
        chiede di controllare un file in un disco che non esiste (per esempio 
        chiede un file da A: ma il dischetto non &egrave; inserito) oppure effettua 
        una ricerca in una forma sbagliata, viene generato un errore. Senza questa 
        riga di gestione degli errori il programma si interromperebbe mostrando 
        una schermata di errore.</p>
      <p>Subito, alla riga 4, prepara una risposta alla ricerca del file, impostando 
        il contenuto di <i>FileEsiste1</i> a False. Questo perch&eacute; il valore 
        di risposta sar&agrave; True <b>solo</b> quando verr&agrave; rilevata 
        l'esistenza del file.</p>
      <p>Alla riga 5 abbiamo il controllo vero e proprio.<br>
        Abbiamo chiamato la funzione <i>Dir</i> con il nome del file da cercare. 
        Se il file esiste essa ci restituir&agrave; il suo <a href="../info/info_07.htm">nome 
        Windows</a>, ovvero se il nome del file cercato &egrave; breve, ci verr&agrave; 
        restituito il suo nome lungo. Se il file non esiste ci verr&agrave; restituita 
        una stringa vuota.</p>
      <p>Se, invece, viene inviata una richiesta errata, specificando una lettera 
        di drive dove non &egrave; presente un disco, viene generato l'errore 
        di runtime 52 (<i>Nome o numero di file non valido</i>). Ma, poich&eacute; 
        alla riga 3 abbiamo inserito un'istruzione di gestione degli errori, non 
        ci viene presentato alcun messaggio di errore ed il codice continua il 
        suo ciclo.</p>
      <p>Alla riga 6 abbiamo il controllo decisivo: viene innanzitutto controllato 
        che il contenuto della variabile <b>strVerifica</b> non sia nullo e verifica 
        inoltre che non sia avvenuto un errore.</p>
      <p>In ogni caso, se il valore di Err.Number &egrave; diverso da zero, la 
        funzione <i>FileEsiste1</i> restituisce il valore False, impostato alla 
        riga 4. Questo perch&eacute; il verificarsi di un errore presuppone un'errata 
        richiesta di file.</p>
      <p>Se invece il valore di Err.Number &egrave; 0 (nessun errore), l'esistenza 
        del file deve essere comprovata dal valore di <b>strVerifica</b>. Se il 
        file non esiste il suo contenuto sar&agrave; una stringa nulla; invece 
        se il contenuto di <b>strVerifica</b> fosse non nullo avremmo la quasi 
        sicurezza che il file esiste, ed in questo caso verrebbe eseguita l'istruzione 
        che imposta il valore di <i>FileEsiste1</i> a True.</p>
      <p>Lo svantaggio principale di questa funzione di controllo &egrave; che 
        essa non &egrave; capace di distinguere un file da un nome di drive. Se, 
        per errore, chiedessimo se esiste il file &quot;C:\&quot; essa ci risponderebbe 
        che esiste; tuttavia non potremmo mai utilizzare la radice come se fosse 
        un file. Inoltre se nella richiesta viene inserito un <a href="../glossary/c.htm#CARATTERIJOLLY">carattere 
        jolly</a> (? oppure *), ad esempio <b>&quot;C:\Command.*&quot;</b> la 
        funzione <i>Dir</i> tratterebbe tale carattere alla stessa maniera di 
        Windows, ovvero andrebbe a cercare tutti i files il cui nome sia Command, 
        senza badare all'estensione. Tutto ci&ograve; potrebbe sembrare corretto: 
        esiste almeno un file con quel nome, ma che succederebbe se provassimo 
        ad aprire il file &quot;C:\Command.*&quot; ? Si genererebbe un errore 
        che bloccherebbe il programma.</p>
      <p>In definitiva il sistema di Dir &egrave; molto comodo, ma richiede che 
        i dati inviati alla funzione siano prima trattati e controllati, al fine 
        di evitare errori.</p>
      <hr>
      <p align="center" class="size3"><a name="STEP2"></a>Secondo sistema (Dir 
        con controllo)</p>
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"> 
        2 / 5</p>
      <p>Prendendo spunto dal sistema precedente, proviamo a migliorare il controllo 
        evitando che vengano utilizzati i caratteri jolly (<a href="../glossary/w.htm#WILDCARDS">wildcards</a>) 
        nella specifica del nome del file.</p>
      <ol class="codicevb" start="1">
        <li>Public Function FileEsiste2(ByVal FileDaControllare As String) As 
          Boolean</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim strVerifica As String</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;On Error Resume Next</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileEsiste2 = False</li>
        <li>&nbsp;</li>
      </ol>
      <p>La funzione <b>FileEsiste2</b> &egrave; molto simile alla precedente, 
        ma stavolta abbiamo inserito una piccola funzione di gestione degli errori. 
        Al verificarsi di un errore il flusso del programma procede alla riga 
        successiva.</p>
      <ol class="codicevb" start="6">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileDaControllare = Trim(FileDaControllare)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If InStr(1, FileDaControllare, &quot;*&quot;) 
          &gt; 0 Then Exit Function</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If InStr(1, FileDaControllare, &quot;?&quot;) 
          &gt; 0 Then Exit Function</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If FileDaControllare = &quot;&quot; Then Exit 
          Function</li>
      </ol>
    <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* Contenuti 468x60 */
google_ad_slot = "0785185013";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Alla riga 6 eliminiamo gli eventuali spazi (iniziali e finali) nel nome 
        del file, mediante la funzione <i>Trim</i>.<br>
        Alla riga 7 controlleremo l'eventuala presenza di un '*' (carattere jolly). 
        In caso ce ne sia almeno uno verr&agrave; forzata l'uscita dalla funzione. 
        Lo stesso tipo di controllo viene effettuato alla riga 8: in caso ci sia 
        un '?'. Altres&igrave;, alla riga 9, controlleremo se il file da cercare 
        non sia una stringa vuota. Anche in tal caso richiederemo l'uscita con 
        la funzione che assumer&agrave; il valore impostato alla riga 4.</p>
      <ol class="codicevb" start="10">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;strVerifica = Dir$(FileDaControllare, 39)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If (strVerifica &lt;&gt; &quot;&quot;) And 
          (Err.Number = 0) Then FileEsiste2 = True</li>
        <li>End Function</li>
      </ol>
      <p>Alla riga 10 abbiamo la solita ricerca mediante la funzione <i>Dir</i>. 
        Il valore 39 corrisponde alla combinazione delle <a href="../glossary/c.htm#COSTANTE">costanti</a> 
        <i><b>vbArchive</b></i>, <i> <b>vbHidden</b></i>, <i><b>vbReadOnly</b></i> 
        e <i><b>vbSystem</b></i> allo scopo di ricercare anche tra i files nascosti 
        ma non le cartelle.<br>
        Se si dovesse generare un errore nell'uso della funzione Dir$ l'esecuzione 
        del programma continuer&agrave; in maniera silenziosa.</p>
      <p>Pertanto alla riga successiva sar&agrave; verificato se la variabile 
        <b>strVerifica</b> non contenga una stringa vuota e non sia stato generato 
        qualche errore. Solo questa condizione assicura che il risultato della 
        funzione Dir sia coerente. Al verificarsi di queste due condizioni sar&agrave; 
        impostato il valore di uscita della funzione su True.</p>
      <p>Questa soluzione effettua alcuni primi controlli ma ancora non provvede 
        a riconoscere i files dalle radici dei dischi.</p>
      <hr>
      <p align="center" class="size3"><a name="STEP3"></a>Terzo sistema (GetAttr)</p>
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level3.gif" width="17" height="18" align="absmiddle"> 
        3 / 5</p>
      <p>Il problema principale delle funzioni viste precedentemente &egrave; 
        che quando forniamo come parametro il percorso di una cartella contenente 
        almeno un file, esse ci rispondono che il file esiste.</p>
      <p>Per evitare questi errori, abbandoneremo l'uso della funzione <i>Dir</i> 
        ed utilizzeremo al suo posto la funzione <i>GetAttr</i>. Essa ci restituisce 
        un numero intero rappresentante gli attributi del file/cartella interessato. 
        Per individuare lo stato di un determinato attributo &egrave; necessario 
        effettuare un'<a href="../info/info_08.htm">estrazione bit a bit</a> del 
        valore restituito da <i>GetAttr</i>.</p>
      <ol class="codicevb" start="1">
        <li>Public Function FileEsiste3(ByVal FileDaControllare As String) As 
          Boolean</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;On Error Resume Next</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileEsiste3 = False</li>
        <li>&nbsp;</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileDaControllare = Trim(FileDaControllare)</li>
      </ol>
      <p>Anche nella funzione <b>FileEsiste3</b> eliminiamo tutti gli spazi - 
        iniziali e finali - dal parametro <i>FileDaControllare</i>, per evitare 
        possibili errori di scrittura. Vada da s&eacute; che la corretta apertura 
        del file richiede il nome del file scritto in maniera corretta, ovvero 
        senza gli spazi iniziali e finali.</p>
      <ol class="codicevb" start="6">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If (GetAttr(FileDaControllare) And vbDirectory) 
          = vbDirectory Then Exit Function</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If Err.Number = 0 Then FileEsiste3 = True</li>
        <li>End Function</li>
      </ol>
      <p>Qui sta il centro di questa funzione. La funzione <i>GetAttr</i> e l'estrazione 
        bit a bit fungono da sistema di verifica.<br>
        Alla riga 6 controlliamo che il file scelto (<b>FileDaControllare</b>) 
        non sia una cartella. Nel caso dovesse esserlo usciremo immediatamente 
        dalla funzione con il valore assegnato in precedenza (riga 3).<br>
        Dopo tale operazione abbiamo la completa sicurezza che il file esiste 
        e che non si tratti di una cartella. Infatti, se il file non dovesse esistere, 
        automaticamente la funzione <i>GetAttr</i> generer&agrave; l'errore di 
        runtime 53 forzando l'esecuzione della riga successiva.</p>
      <p>Poich&eacute; la riga 6 ci d&agrave; la sicurezza che il file richiesto 
        esista, possiamo tranquillamente impostare il contenuto di <b>FileEsiste</b> 
        a True e forzare l'uscita dalla funzione in caso non si siano verificati 
        errori in precedenza.</p>
      <p>Questa funzione &egrave; ancora pi&ugrave; precisa delle precedenti, 
        pur essendo pi&ugrave; semplice, ma in alcuni casi - particolarmente rari 
        - pu&ograve; dare qualche problema.</p>
      <hr>
      <p align="center" class="size3"><a name="STEP4"></a>Quarto sistema (Open)</p>
      <p align="right" class="size3">Difficolt&agrave;: <img src="../images/icons/level1.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level2.gif" width="17" height="18" align="absmiddle"><img src="../images/icons/level3.gif" width="17" height="18" align="absmiddle"> 
        3 / 5</p>
      <p>Il caso accennato sopra corrisponde ai tentativi di apertura di files 
        che risiedono in cartelle protette, delle quali &egrave; possibile ricavare 
        lo stato degli attributi, la presenza del file, ma non &egrave; possibile, 
        ad esempio apportare modifiche.</p>
      <p>La funzione che vedremo questa volta tenter&agrave; di effettuare l'apertura 
        del file in modalit&agrave; lettura e scrittura. Se l'apertura del file 
        in tali modalit&agrave; andr&agrave; a buon fine avremo la sicurezza che 
        il file esiste e che sia accessibile, sia in lettura che in scrittura, 
        agli altri programmi. Per qualche informazione aggiuntiva sulle modalit&agrave; 
        di apertura di un file dare uno sguardo all'<a href="ht_003.htm">HowTo 
        dedicato alla lettura di un file</a>.</p>
      <ol class="codicevb" start="1">
        <li>Public Function FileEsiste4(ByVal FileDaControllare As String) As 
          Boolean</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim FileNR As Integer</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;On Error Resume Next</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileDaControllare = Trim(FileDaControllare)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;FileEsiste4 = False</li>
        <li>&nbsp;</li>
      </ol>
      <p>Al solito, nella prima parte della funzione inizializziamo la gestione 
        degli errori, eliminiamo gli spazi iniziali e finali dal nome del file 
        ed inizializziamo il contenuto della funzione <b>FileEsiste4</b>.<br>
        Per&ograve; in pi&ugrave; stavolta, abbiamo dichiarato (riga 2) una variabile 
        di nome <b>FileNR</b> che ci servir&agrave; come numero di <a href="../glossary/h.htm#HANDLE">handle</a> 
        del file da aprire.</p>
      <ol class="codicevb" start="7">
        <li> &nbsp;&nbsp;&nbsp;&nbsp;FileNR = FreeFile</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Open FileDaControllare For Input As FileNR</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Close FileNR</li>
      </ol>
      <p>Alla riga 6 otteniamo il primo handle di file libero mediante la funzione 
        <i>FreeFile</i> e memorizziamo tale valore all'interno della variabile 
        <b>FileNR</b>.</p>
      <p align="center"><script type="text/javascript"><!--
google_ad_client = "pub-8218922773694577";
/* 468x60 solo testo */
google_ad_slot = "6726967947";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></p>
      <p>Subito dopo questo tentiamo l'apertura del file in modalit&agrave; <i>Input</i> 
        ovvero lettura.<br>
        Se tale operazione andr&agrave; a buon fine avremo la completa sicurezza 
        che il file esiste e che sia accessibile in lettura agli altri programmi. 
        In caso contrario, l'istruzione <i>Open</i> generer&agrave; un errore 
        di runtime che verr&agrave; verificato pi&ugrave; in basso. Subito dopo 
        aperto il file in lettura provvediamo a chiuderlo, per tentare la successiva 
        riapertura in modalit&agrave; scrittura.</p>
      <ol class="codicevb" start="10">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If Err.Number = 0 Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Open FileDaControllare 
          For Append As FileNR</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Close FileNR</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;End If</li>
      </ol>
      <p>Ed ecco che alla riga 9 se l'operazione precedente non ha generato alcun 
        errore, tentiamo l'apertura del file in modalit&agrave; <i>Append</i>, 
        ovvero scrittura aggiuntiva al file esistente. Giunti a questa riga, sappiamo 
        con sicurezza che il file esiste, ed ecco perch&eacute; tentiamo l'apertura 
        in <i>Append</i>: infatti il tentativo di apertura del file in modalit&agrave; 
        <i>Output</i> comporterebbe l'azzeramento del file esistente.<br>
        &Egrave; stata un po' una strada obbligatoria per preservare il contenuto 
        del file esistente.<br>
        Anche in questo caso, se non &egrave; possibile aprire il file in tale 
        modalit&agrave;, verr&agrave; generato un errore ed il flusso del programma 
        proseguir&agrave; regolarmente. In caso di possibile apertura il file 
        verr&agrave; aperto.<br>
        Alla riga 11 effettuiamo, per cui, la chiusura del file aperto prima.</p>
      <ol class="codicevb" start="14">
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If Err.Number = 0 Then FileEsiste4 = True</li>
        <li>End Function</li>
      </ol>
      <p>Giunti alla riga 11 ci baster&agrave; verificare se la precedente apertura 
        ha generato qualche errore. Nel caso non ci siano stati errori possiamo 
        dire con sicurezza che il file esiste ed &egrave; accessibile almeno in 
        due modalit&agrave;. Impostiamo il contenuto di <b>FileEsiste</b> a True 
        e possiamo uscire dalla funzione.</p>
      <hr>
      <p align="center" class="size3"><a name="STEP5"></a>Testiamo le quattro 
        funzioni</p>
      <p><img src="../images/howto/howto011_01.jpg" width="242" height="73" align="right" alt="Figura 1">A 
        questo punto disegnamo una semplice interfaccia per provare le quattro 
        funzioni: posizioniamo sopra un form una <i>TextBox</i><img src="../images/controls/textbox.gif" width="25" height="25" align="absmiddle">di 
        nome <b>NomeFile</b> ed una matrice di 4 pulsanti di nome <b>Controlla</b> 
        con <i>Index</i> da 0 a 3.</p>
      <p>Nella finestra del codice, alla routine che gestisce il click sopra uno 
        qualunque dei pulsanti scriviamo:</p>
      <ol class="codicevb" start="1">
        <li>Private Sub Controlla_Click(Index As Integer)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Dim Esiste As Boolean</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Select Case Index</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case 0: Esiste = FileEsiste1(NomeFile.Text)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case 1: Esiste = FileEsiste2(NomeFile.Text)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case 2: Esiste = FileEsiste3(NomeFile.Text)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Case 3: Esiste = FileEsiste4(NomeFile.Text)</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;End Select</li>
        <li></li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;If Esiste = True Then</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox &quot;Il file 
          &quot; &amp; NomeFile.Text &amp; &quot; esiste&quot;, vbInformation 
          + vbOKOnly</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;Else</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MsgBox &quot;Il file 
          &quot; &amp; NomeFile.Text &amp; &quot; non esiste&quot;, vbCritical 
          + vbOKOnly</li>
        <li>&nbsp;&nbsp;&nbsp;&nbsp;End If</li>
        <li>End Sub</li>
      </ol>
      <p>Il codice &egrave; molto molto semplice: alla riga 2 viene dichiarata 
        una variabile di tipo <i>Boolean</i> di nome <b>Esiste</b>; essa conterr&agrave; 
        il valore restituito dalle quattro funzioni di controllo del file.</p>
      <p>Alla riga 3 viene controllato il valore di <i>Index</i> fornito come 
        parametro dall'evento Click; tale valore corrisponde alla propriet&agrave; 
        <i>Index</i> del pulsante premuto.<br>
        Per ognuno dei quattro pulsanti viene chiamata la funzione corrispondente 
        viste prima.</p>
      <p>Alla riga 10 viene controllato il valore restituito da tali funzioni: 
        se esso &egrave; True - ovvero il file esiste, secondo il criterio adoperato 
        dalla funzione - viene visualizzata una finestra di dialogo che informa 
        che il file esiste. In caso contrario ne viene visualizzata una di errore.</p>
      <p>Per provare le funzioni si consiglia l'immissione di una cartella quale 
        <b>&quot;C:\&quot;</b> e vedere, per ognuna delle funzioni, il risultato 
        riportato.<br>
        <br>
      </p>
      <!-- #EndEditable --></td>
  </tr>
</table>

<table width="100%">
  <tr> 
    <td><!-- #BeginEditable "FINALE" -->
      <p>Alla fine dell'esame, la routine che pu&ograve; sembrare pi&ugrave; idonea 
        al controllo dell'esistenza di un file &egrave; l'ultima perch&eacute; 
        adopera le soluzioni di apertura sia in lettura che in scrittura per assicurare 
        l'accesso a tale file.<br>
        Tuttavia, se in un nostro progetto non ci interessa testare la funzionalit&agrave; 
        di un file, ma soltanto elencare o controllare l'esistenza di un determinato 
        file, quest'ultima funzione non &egrave; idonea, perch&eacute; in taluni 
        casi pu&ograve; portare risultati errati.<br>
        In questo genere di casi si consiglia l'utilizzo della terza funzione, 
        ovvero il controllo mediante la funzione <i>GetAttr</i>.</p>
      <!-- #EndEditable -->
      <p align="right" class="credits2"><!-- #BeginEditable "CREDITS" --><a href="../vbmail.htm?id=1">Fibia 
        FBI</a><br>
        11 Dicembre 2000<br>
        Rivisto e corretto il 22 Agosto 2002<!-- #EndEditable --></p>
      <!-- #BeginLibraryItem "/Library/Toolbar.lbi" -->
      <table width="80%" border="1" cellspacing="1" cellpadding="3" align="center" bordercolor="#000000" class="dontprint">
        <tr> 
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaZIP();"><img src="../images/icons/tool%20download.gif" width="16" height="18" border="0" alt="Scarica il progetto"><br>
            <span class="size1">Scarica il progetto</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:ScaricaPDF();"><img src="../images/icons/tool%20pdf.gif" width="16" height="18" alt="Scarica il testo dell'articolo" border="0"><br>
            <span class="size1">Scarica il testo dell'articolo</span></a></td>
          <td align="center" valign="top" width="33%"><a href="javascript:Stampa();"><img src="../images/icons/tool%20print.gif" width="16" height="18" alt="Stampa l'articolo" border="0"><br>
            <span class="size1">Stampa l'articolo</span></a></td>
        </tr>
      </table><!-- #EndLibraryItem -->
    </td>
  </tr>
</table>
<table width="100%" border="0" cellspacing="2" cellpadding="2">
  <tr>
    <td align="left"><a href="index.htm"><img src="../images/vbprev.jpg" width="49" height="32" align="absmiddle" border="0"> 
      Torna all'indice degli HowTo</a></td>
    <td align="right">&nbsp;</td>
  </tr>
</table>

<hr width="80%">
<table width="100%">
  <tr>
    <td width="100%" align="center">
      <script language="Javascript">Banner();</script>
      <!--#echo banner=""-->
    </td>
  </tr>
</table>
<script language="Javascript">FibiaWebStats();</script>
</body>
<!-- #EndTemplate --></html>
